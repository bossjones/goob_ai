"""
This type stub file was generated by pyright.
"""

"""Client and server classes corresponding to protobuf-defined services."""
class VectorServiceStub:
    """The `VectorService` interface is exposed by Pinecone's vector index services.
    This service could also be called a `gRPC` service or a `REST`-like api.
    """
    def __init__(self, channel) -> None:
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        ...
    


class VectorServiceServicer:
    """The `VectorService` interface is exposed by Pinecone's vector index services.
    This service could also be called a `gRPC` service or a `REST`-like api.
    """
    def Upsert(self, request, context):
        """Upsert vectors

        The `upsert` operation writes vectors into a namespace. If a new value is upserted for an existing vector ID, it will overwrite the previous value.

        For guidance and examples, see [Upsert data](https://docs.pinecone.io/docs/upsert-data).
        """
        ...
    
    def Delete(self, request, context):
        """Delete vectors

        The `delete` operation deletes vectors, by id, from a single namespace.

        For guidance and examples, see [Delete data](https://docs.pinecone.io/docs/delete-data).
        """
        ...
    
    def Fetch(self, request, context):
        """Fetch vectors

        The `fetch` operation looks up and returns vectors, by ID, from a single namespace. The returned vectors include the vector data and/or metadata.

        For guidance and examples, see [Fetch data](https://docs.pinecone.io/docs/fetch-data).
        """
        ...
    
    def List(self, request, context):
        """List vector IDs

        The `list` operation lists the IDs of vectors in a single namespace of a serverless index. An optional prefix can be passed to limit the results to IDs with a common prefix.

        `list` returns up to 100 IDs at a time by default in sorted order (bitwise/"C" collation). If the `limit` parameter is set, `list` returns up to that number of IDs instead. Whenever there are additional IDs to return, the response also includes a `pagination_token` that you can use to get the next batch of IDs. When the response does not include a `pagination_token`, there are no more IDs to return.

        For guidance and examples, see [Get record IDs](https://docs.pinecone.io/docs/get-record-ids).

        **Note:** `list` is supported only for serverless indexes.
        """
        ...
    
    def Query(self, request, context):
        """Query vectors

        The `query` operation searches a namespace, using a query vector. It retrieves the ids of the most similar items in a namespace, along with their similarity scores.

        For guidance and examples, see [Query data](https://docs.pinecone.io/docs/query-data).
        """
        ...
    
    def Update(self, request, context):
        """Update a vector

        The `update` operation updates a vector in a namespace. If a value is included, it will overwrite the previous value. If a `set_metadata` is included, the values of the fields specified in it will be added or overwrite the previous value.

        For guidance and examples, see [Update data](https://docs.pinecone.io/docs/update-data).
        """
        ...
    
    def DescribeIndexStats(self, request, context):
        """Get index stats

        The `describe_index_stats` operation returns statistics about the contents of an index, including the vector count per namespace and the number of dimensions, and the index fullness.

        Serverless indexes scale automatically as needed, so index fullness is relevant only for pod-based indexes.

        For pod-based indexes, the index fullness result may be inaccurate during pod resizing; to get the status of a pod resizing process, use [`describe_index`](https://www.pinecone.io/docs/api/operation/describe_index/).
        """
        ...
    


def add_VectorServiceServicer_to_server(servicer, server): # -> None:
    ...

class VectorService:
    """The `VectorService` interface is exposed by Pinecone's vector index services.
    This service could also be called a `gRPC` service or a `REST`-like api.
    """
    @staticmethod
    def Upsert(request, target, options=..., channel_credentials=..., call_credentials=..., insecure=..., compression=..., wait_for_ready=..., timeout=..., metadata=...):
        ...
    
    @staticmethod
    def Delete(request, target, options=..., channel_credentials=..., call_credentials=..., insecure=..., compression=..., wait_for_ready=..., timeout=..., metadata=...):
        ...
    
    @staticmethod
    def Fetch(request, target, options=..., channel_credentials=..., call_credentials=..., insecure=..., compression=..., wait_for_ready=..., timeout=..., metadata=...):
        ...
    
    @staticmethod
    def List(request, target, options=..., channel_credentials=..., call_credentials=..., insecure=..., compression=..., wait_for_ready=..., timeout=..., metadata=...):
        ...
    
    @staticmethod
    def Query(request, target, options=..., channel_credentials=..., call_credentials=..., insecure=..., compression=..., wait_for_ready=..., timeout=..., metadata=...):
        ...
    
    @staticmethod
    def Update(request, target, options=..., channel_credentials=..., call_credentials=..., insecure=..., compression=..., wait_for_ready=..., timeout=..., metadata=...):
        ...
    
    @staticmethod
    def DescribeIndexStats(request, target, options=..., channel_credentials=..., call_credentials=..., insecure=..., compression=..., wait_for_ready=..., timeout=..., metadata=...):
        ...
    


