"""
This type stub file was generated by pyright.
"""

import io
import typing

"""
    Pinecone Control Plane API

    Pinecone is a vector database that makes it easy to search and retrieve billions of high-dimensional vectors.  # noqa: E501

    The version of the OpenAPI document: v1
    Contact: support@pinecone.io
    Generated by: https://openapi-generator.tech
"""
class ApiClient:
    """Generic API client for OpenAPI client library builds.

    OpenAPI generic API client. This client handles the client-
    server communication, and is invariant across implementations. Specifics of
    the methods and models for each application are generated from the OpenAPI
    templates.

    NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech
    Do not edit the class manually.

    :param configuration: .Configuration object for this client
    :param header_name: a header to pass when making calls to the API.
    :param header_value: a header value to pass when making calls to
        the API.
    :param cookie: a cookie to include in the header when making calls
        to the API
    :param pool_threads: The number of threads to use for async requests
        to the API. More threads means more concurrent API requests.
    """
    _pool = ...
    def __init__(self, configuration=..., header_name=..., header_value=..., cookie=..., pool_threads=...) -> None:
        ...
    
    def __enter__(self): # -> Self:
        ...
    
    def __exit__(self, exc_type, exc_value, traceback): # -> None:
        ...
    
    def close(self): # -> None:
        ...
    
    @property
    def pool(self): # -> ThreadPool:
        """Create thread pool on first request
         avoids instantiating unused threadpool for blocking clients.
        """
        ...
    
    @property
    def user_agent(self):
        """User agent for this API client"""
        ...
    
    @user_agent.setter
    def user_agent(self, value): # -> None:
        ...
    
    def set_default_header(self, header_name, header_value): # -> None:
        ...
    
    def parameters_to_multipart(self, params, collection_types): # -> list[Any]:
        """Get parameters as list of tuples, formatting as json if value is collection_types

        :param params: Parameters as list of two-tuples
        :param dict collection_types: Parameter collection types
        :return: Parameters as list of tuple or urllib3.fields.RequestField
        """
        ...
    
    @classmethod
    def sanitize_for_serialization(cls, obj): # -> dict[Any, Any] | bytes | str | int | float | bool | list[Any] | None:
        """Prepares data for transmission before it is sent with the rest client
        If obj is None, return None.
        If obj is str, int, long, float, bool, return directly.
        If obj is datetime.datetime, datetime.date
            convert to string in iso8601 format.
        If obj is list, sanitize each element in the list.
        If obj is dict, return the dict.
        If obj is OpenAPI model, return the properties dict.
        If obj is io.IOBase, return the bytes
        :param obj: The data to serialize.
        :return: The serialized form of data.
        """
        ...
    
    def deserialize(self, response, response_type, _check_type): # -> BufferedReader | list[Any] | dict[Any, Any] | None:
        """Deserializes response into an object.

        :param response: RESTResponse object to be deserialized.
        :param response_type: For the response, a tuple containing:
            valid classes
            a list containing valid classes (for list schemas)
            a dict containing a tuple of valid classes as the value
            Example values:
            (str,)
            (Pet,)
            (float, none_type)
            ([int, none_type],)
            ({str: (bool, str, int, float, date, datetime, str, none_type)},)
        :param _check_type: boolean, whether to check the types of the data
            received from the server
        :type _check_type: bool

        :return: deserialized object.
        """
        ...
    
    def call_api(self, resource_path: str, method: str, path_params: typing.Optional[typing.Dict[str, typing.Any]] = ..., query_params: typing.Optional[typing.List[typing.Tuple[str, typing.Any]]] = ..., header_params: typing.Optional[typing.Dict[str, typing.Any]] = ..., body: typing.Optional[typing.Any] = ..., post_params: typing.Optional[typing.List[typing.Tuple[str, typing.Any]]] = ..., files: typing.Optional[typing.Dict[str, typing.List[io.IOBase]]] = ..., response_type: typing.Optional[typing.Tuple[typing.Any]] = ..., auth_settings: typing.Optional[typing.List[str]] = ..., async_req: typing.Optional[bool] = ..., _return_http_data_only: typing.Optional[bool] = ..., collection_formats: typing.Optional[typing.Dict[str, str]] = ..., _preload_content: bool = ..., _request_timeout: typing.Optional[typing.Union[int, float, typing.Tuple]] = ..., _host: typing.Optional[str] = ..., _check_type: typing.Optional[bool] = ...): # -> BufferedReader | list[Any] | dict[Any, Any] | tuple[BufferedReader | Any | list[Any] | dict[Any, Any] | None, Any, Any] | AsyncResult | None:
        """Makes the HTTP request (synchronous) and returns deserialized data.

        To make an async_req request, set the async_req parameter.

        :param resource_path: Path to method endpoint.
        :param method: Method to call.
        :param path_params: Path parameters in the url.
        :param query_params: Query parameters in the url.
        :param header_params: Header parameters to be
            placed in the request header.
        :param body: Request body.
        :param post_params dict: Request post form parameters,
            for `application/x-www-form-urlencoded`, `multipart/form-data`.
        :param auth_settings list: Auth Settings names for the request.
        :param response_type: For the response, a tuple containing:
            valid classes
            a list containing valid classes (for list schemas)
            a dict containing a tuple of valid classes as the value
            Example values:
            (str,)
            (Pet,)
            (float, none_type)
            ([int, none_type],)
            ({str: (bool, str, int, float, date, datetime, str, none_type)},)
        :param files: key -> field name, value -> a list of open file
            objects for `multipart/form-data`.
        :type files: dict
        :param async_req bool: execute request asynchronously
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param collection_formats: dict of collection formats for path, query,
            header, and post parameters.
        :type collection_formats: dict, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _check_type: boolean describing if the data back from the server
            should have its type checked.
        :type _check_type: bool, optional
        :return:
            If async_req parameter is True,
            the request will be called asynchronously.
            The method will return the request thread.
            If parameter async_req is False or missing,
            then the method will return the response directly.
        """
        ...
    
    def request(self, method, url, query_params=..., headers=..., post_params=..., body=..., _preload_content=..., _request_timeout=...):
        """Makes the HTTP request using RESTClient."""
        ...
    
    def parameters_to_tuples(self, params, collection_formats): # -> list[Any]:
        """Get parameters as list of tuples, formatting collections.

        :param params: Parameters as dict or list of two-tuples
        :param dict collection_formats: Parameter collection formats
        :return: Parameters as list of tuples, collections formatted
        """
        ...
    
    @staticmethod
    def get_file_data_and_close_file(file_instance: io.IOBase) -> bytes:
        ...
    
    def files_parameters(self, files: typing.Optional[typing.Dict[str, typing.List[io.IOBase]]] = ...): # -> list[Any]:
        """Builds form parameters.

        :param files: None or a dict with key=param_name and
            value is a list of open file objects
        :return: List of tuples of form parameters with file data
        """
        ...
    
    def select_header_accept(self, accepts): # -> LiteralString | Literal['application/json'] | None:
        """Returns `Accept` based on an array of accepts provided.

        :param accepts: List of headers.
        :return: Accept (e.g. application/json).
        """
        ...
    
    def select_header_content_type(self, content_types): # -> Literal['application/json']:
        """Returns `Content-Type` based on an array of content_types provided.

        :param content_types: List of content-types.
        :return: Content-Type (e.g. application/json).
        """
        ...
    
    def update_params_for_auth(self, headers, querys, auth_settings, resource_path, method, body): # -> None:
        """Updates header and query params based on authentication setting.

        :param headers: Header parameters dict to be updated.
        :param querys: Query parameters tuple list to be updated.
        :param auth_settings: Authentication setting identifiers list.
        :param resource_path: A string representation of the HTTP request resource path.
        :param method: A string representation of the HTTP request method.
        :param body: A object representing the body of the HTTP request.
            The object type is the return value of _encoder.default().
        """
        ...
    


class Endpoint:
    def __init__(self, settings=..., params_map=..., root_map=..., headers_map=..., api_client=..., callable=...) -> None:
        """Creates an endpoint

        Args:
            settings (dict): see below key value pairs
                'response_type' (tuple/None): response type
                'auth' (list): a list of auth type keys
                'endpoint_path' (str): the endpoint path
                'operation_id' (str): endpoint string identifier
                'http_method' (str): POST/PUT/PATCH/GET etc
                'servers' (list): list of str servers that this endpoint is at
            params_map (dict): see below key value pairs
                'all' (list): list of str endpoint parameter names
                'required' (list): list of required parameter names
                'nullable' (list): list of nullable parameter names
                'enum' (list): list of parameters with enum values
                'validation' (list): list of parameters with validations
            root_map
                'validations' (dict): the dict mapping endpoint parameter tuple
                    paths to their validation dictionaries
                'allowed_values' (dict): the dict mapping endpoint parameter
                    tuple paths to their allowed_values (enum) dictionaries
                'openapi_types' (dict): param_name to openapi type
                'attribute_map' (dict): param_name to camelCase name
                'location_map' (dict): param_name to  'body', 'file', 'form',
                    'header', 'path', 'query'
                collection_format_map (dict): param_name to `csv` etc.
            headers_map (dict): see below key value pairs
                'accept' (list): list of Accept header strings
                'content_type' (list): list of Content-Type header strings
            api_client (ApiClient) api client instance
            callable (function): the function which is invoked when the
                Endpoint is called
        """
        ...
    
    def __call__(self, *args, **kwargs):
        """ This method is invoked when endpoints are called
        Example:

        api_instance = DataPlaneApi()
        api_instance.alt_delete  # this is an instance of the class Endpoint
        api_instance.alt_delete()  # this invokes api_instance.alt_delete.__call__()
        which then invokes the callable functions stored in that endpoint at
        api_instance.alt_delete.callable or self.callable in this class

        """
        ...
    
    def call_with_http_info(self, **kwargs):
        ...
    


