"""
This type stub file was generated by pyright.
"""

import torch
from typing import Any, Dict, List, Optional, TYPE_CHECKING, Union
from .base import HfQuantizer
from ..modeling_utils import PreTrainedModel
from ..utils import is_torch_available
from ..utils.quantization_config import QuantoConfig

if TYPE_CHECKING:
    ...
if is_torch_available():
    ...
logger = ...
class QuantoHfQuantizer(HfQuantizer):
    """
    Quantizer for the quanto library
    """
    required_packages = ...
    requires_parameters_quantization = ...
    requires_calibration = ...
    def __init__(self, quantization_config: QuantoConfig, **kwargs) -> None:
        ...
    
    def post_init(self): # -> None:
        r"""
        Safety checker
        """
        ...
    
    def validate_environment(self, *args, **kwargs): # -> None:
        ...
    
    def update_device_map(self, device_map): # -> dict[str, str] | Dict[str, Any]:
        ...
    
    def update_torch_dtype(self, torch_dtype: torch.dtype) -> torch.dtype:
        ...
    
    def update_missing_keys(self, model, missing_keys: List[str], prefix: str) -> List[str]:
        ...
    
    def check_quantized_param(self, model: PreTrainedModel, param_value: torch.Tensor, param_name: str, state_dict: Dict[str, Any], **kwargs) -> bool:
        """
        Check if a parameter needs to be quantized.
        """
        ...
    
    def adjust_max_memory(self, max_memory: Dict[str, Union[int, str]]) -> Dict[str, Union[int, str]]:
        ...
    
    def create_quantized_param(self, model: PreTrainedModel, param_value: torch.Tensor, param_name: str, target_device: torch.device, *args, **kwargs): # -> None:
        """
        Create the quantized parameter by calling .freeze() after setting it to the module.
        """
        ...
    
    def adjust_target_dtype(self, target_dtype: torch.dtype) -> torch.dtype:
        ...
    
    @property
    def is_trainable(self, model: Optional[PreTrainedModel] = ...): # -> Literal[False]:
        ...
    
    @property
    def is_serializable(self): # -> Literal[False]:
        ...
    


