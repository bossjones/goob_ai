"""
This type stub file was generated by pyright.
"""

from dataclasses import dataclass
from typing import Optional
from ...configuration_utils import PretrainedConfig

""" ESM model configuration"""
logger = ...
class EsmConfig(PretrainedConfig):
    r"""
    This is the configuration class to store the configuration of a [`ESMModel`]. It is used to instantiate a ESM model
    according to the specified arguments, defining the model architecture. Instantiating a configuration with the
    defaults will yield a similar configuration to that of the ESM
    [facebook/esm-1b](https://huggingface.co/facebook/esm-1b) architecture.

    Configuration objects inherit from [`PretrainedConfig`] and can be used to control the model outputs. Read the
    documentation from [`PretrainedConfig`] for more information.


    Args:
        vocab_size (`int`, *optional*):
            Vocabulary size of the ESM model. Defines the number of different tokens that can be represented by the
            `inputs_ids` passed when calling [`ESMModel`].
        mask_token_id (`int`, *optional*):
            The index of the mask token in the vocabulary. This must be included in the config because of the
            "mask-dropout" scaling trick, which will scale the inputs depending on the number of masked tokens.
        pad_token_id (`int`, *optional*):
            The index of the padding token in the vocabulary. This must be included in the config because certain parts
            of the ESM code use this instead of the attention mask.
        hidden_size (`int`, *optional*, defaults to 768):
            Dimensionality of the encoder layers and the pooler layer.
        num_hidden_layers (`int`, *optional*, defaults to 12):
            Number of hidden layers in the Transformer encoder.
        num_attention_heads (`int`, *optional*, defaults to 12):
            Number of attention heads for each attention layer in the Transformer encoder.
        intermediate_size (`int`, *optional*, defaults to 3072):
            Dimensionality of the "intermediate" (often named feed-forward) layer in the Transformer encoder.
        hidden_dropout_prob (`float`, *optional*, defaults to 0.1):
            The dropout probability for all fully connected layers in the embeddings, encoder, and pooler.
        attention_probs_dropout_prob (`float`, *optional*, defaults to 0.1):
            The dropout ratio for the attention probabilities.
        max_position_embeddings (`int`, *optional*, defaults to 1026):
            The maximum sequence length that this model might ever be used with. Typically set this to something large
            just in case (e.g., 512 or 1024 or 2048).
        initializer_range (`float`, *optional*, defaults to 0.02):
            The standard deviation of the truncated_normal_initializer for initializing all weight matrices.
        layer_norm_eps (`float`, *optional*, defaults to 1e-12):
            The epsilon used by the layer normalization layers.
        position_embedding_type (`str`, *optional*, defaults to `"absolute"`):
            Type of position embedding. Choose one of `"absolute"`, `"relative_key"`, `"relative_key_query", "rotary"`.
            For positional embeddings use `"absolute"`. For more information on `"relative_key"`, please refer to
            [Self-Attention with Relative Position Representations (Shaw et al.)](https://arxiv.org/abs/1803.02155).
            For more information on `"relative_key_query"`, please refer to *Method 4* in [Improve Transformer Models
            with Better Relative Position Embeddings (Huang et al.)](https://arxiv.org/abs/2009.13658).
        is_decoder (`bool`, *optional*, defaults to `False`):
            Whether the model is used as a decoder or not. If `False`, the model is used as an encoder.
        use_cache (`bool`, *optional*, defaults to `True`):
            Whether or not the model should return the last key/values attentions (not used by all models). Only
            relevant if `config.is_decoder=True`.
        emb_layer_norm_before (`bool`, *optional*):
            Whether to apply layer normalization after embeddings but before the main stem of the network.
        token_dropout (`bool`, defaults to `False`):
            When this is enabled, masked tokens are treated as if they had been dropped out by input dropout.

    Examples:

    ```python
    >>> from transformers import EsmModel, EsmConfig

    >>> # Initializing a ESM facebook/esm-1b style configuration >>> configuration = EsmConfig()

    >>> # Initializing a model from the configuration >>> model = ESMModel(configuration)

    >>> # Accessing the model configuration >>> configuration = model.config
    ```"""
    model_type = ...
    def __init__(self, vocab_size=..., mask_token_id=..., pad_token_id=..., hidden_size=..., num_hidden_layers=..., num_attention_heads=..., intermediate_size=..., hidden_dropout_prob=..., attention_probs_dropout_prob=..., max_position_embeddings=..., initializer_range=..., layer_norm_eps=..., position_embedding_type=..., use_cache=..., emb_layer_norm_before=..., token_dropout=..., is_folding_model=..., esmfold_config=..., vocab_list=..., **kwargs) -> None:
        ...
    
    def to_dict(self): # -> Dict[str, Any]:
        """
        Serializes this instance to a Python dictionary. Override the default [`~PretrainedConfig.to_dict`].

        Returns:
            `Dict[str, any]`: Dictionary of all the attributes that make up this configuration instance,
        """
        ...
    


@dataclass
class EsmFoldConfig:
    esm_type: str = ...
    fp16_esm: bool = ...
    use_esm_attn_map: bool = ...
    esm_ablate_pairwise: bool = ...
    esm_ablate_sequence: bool = ...
    esm_input_dropout: float = ...
    embed_aa: bool = ...
    bypass_lm: bool = ...
    lddt_head_hid_dim: int = ...
    trunk: TrunkConfig = ...
    def __post_init__(self): # -> None:
        ...
    
    def to_dict(self): # -> dict[str, Any]:
        """
        Serializes this instance to a Python dictionary. Override the default [`~PretrainedConfig.to_dict`].

        Returns:
            `Dict[str, any]`: Dictionary of all the attributes that make up this configuration instance,
        """
        ...
    


@dataclass
class TrunkConfig:
    num_blocks: int = ...
    sequence_state_dim: int = ...
    pairwise_state_dim: int = ...
    sequence_head_width: int = ...
    pairwise_head_width: int = ...
    position_bins: int = ...
    dropout: float = ...
    layer_drop: float = ...
    cpu_grad_checkpoint: bool = ...
    max_recycles: int = ...
    chunk_size: Optional[int] = ...
    structure_module: StructureModuleConfig = ...
    def __post_init__(self): # -> None:
        ...
    
    def to_dict(self): # -> dict[str, Any]:
        """
        Serializes this instance to a Python dictionary. Override the default [`~PretrainedConfig.to_dict`].

        Returns:
            `Dict[str, any]`: Dictionary of all the attributes that make up this configuration instance,
        """
        ...
    


@dataclass
class StructureModuleConfig:
    """
    Args:
        sequence_dim:
            Single representation channel dimension
        pairwise_dim:
            Pair representation channel dimension
        ipa_dim:
            IPA hidden channel dimension
        resnet_dim:
            Angle resnet (Alg. 23 lines 11-14) hidden channel dimension
        num_heads_ipa:
            Number of IPA heads
        num_qk_points:
            Number of query/key points to generate during IPA
        num_v_points:
            Number of value points to generate during IPA
        dropout_rate:
            Dropout rate used throughout the layer
        num_blocks:
            Number of structure module blocks
        num_transition_layers:
            Number of layers in the single representation transition (Alg. 23 lines 8-9)
        num_resnet_blocks:
            Number of blocks in the angle resnet
        num_angles:
            Number of angles to generate in the angle resnet
        trans_scale_factor:
            Scale of single representation transition hidden dimension
        epsilon:
            Small number used in angle resnet normalization
        inf:
            Large number used for attention masking
    """
    sequence_dim: int = ...
    pairwise_dim: int = ...
    ipa_dim: int = ...
    resnet_dim: int = ...
    num_heads_ipa: int = ...
    num_qk_points: int = ...
    num_v_points: int = ...
    dropout_rate: float = ...
    num_blocks: int = ...
    num_transition_layers: int = ...
    num_resnet_blocks: int = ...
    num_angles: int = ...
    trans_scale_factor: int = ...
    epsilon: float = ...
    inf: float = ...
    def to_dict(self): # -> dict[str, Any]:
        ...
    


def get_default_vocab_list(): # -> tuple[Literal['<cls>'], Literal['<pad>'], Literal['<eos>'], Literal['<unk>'], Literal['L'], Literal['A'], Literal['G'], Literal['V'], Literal['S'], Literal['E'], Literal['R'], Literal['T'], Literal['I'], Literal['D'], Literal['P'], Literal['K'], Literal['Q'], Literal['N'], Literal['F'], Literal['Y'], Literal['M'], Literal['H'], Literal['W'], Literal['C'], Literal['X'], Literal['B'], Literal['U'], Literal['Z'], Literal['O'], Literal['.'], Literal['-'], Literal['<null_1>'], Literal['<mask>']]:
    ...

