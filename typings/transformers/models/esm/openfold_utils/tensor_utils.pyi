"""
This type stub file was generated by pyright.
"""

import torch
import torch.types
from typing import Any, Callable, Dict, List, Type, TypeVar, Union, overload

def add(m1: torch.Tensor, m2: torch.Tensor, inplace: bool) -> torch.Tensor:
    ...

def permute_final_dims(tensor: torch.Tensor, inds: List[int]) -> torch.Tensor:
    ...

def flatten_final_dims(t: torch.Tensor, no_dims: int) -> torch.Tensor:
    ...

def masked_mean(mask: torch.Tensor, value: torch.Tensor, dim: int, eps: float = ...) -> torch.Tensor:
    ...

def pts_to_distogram(pts: torch.Tensor, min_bin: torch.types.Number = ..., max_bin: torch.types.Number = ..., no_bins: int = ...) -> torch.Tensor:
    ...

def dict_multimap(fn: Callable[[list], Any], dicts: List[dict]) -> dict:
    ...

def one_hot(x: torch.Tensor, v_bins: torch.Tensor) -> torch.Tensor:
    ...

def batched_gather(data: torch.Tensor, inds: torch.Tensor, dim: int = ..., no_batch_dims: int = ...) -> torch.Tensor:
    ...

T = TypeVar("T")
def dict_map(fn: Callable[[T], Any], dic: Dict[Any, Union[dict, list, tuple, T]], leaf_type: Type[T]) -> Dict[Any, Union[dict, list, tuple, Any]]:
    ...

@overload
def tree_map(fn: Callable[[T], Any], tree: T, leaf_type: Type[T]) -> Any:
    ...

@overload
def tree_map(fn: Callable[[T], Any], tree: dict, leaf_type: Type[T]) -> dict:
    ...

@overload
def tree_map(fn: Callable[[T], Any], tree: list, leaf_type: Type[T]) -> list:
    ...

@overload
def tree_map(fn: Callable[[T], Any], tree: tuple, leaf_type: Type[T]) -> tuple:
    ...

def tree_map(fn, tree, leaf_type): # -> Dict[Any, dict[Any, Any] | list[Any] | tuple[Any, ...] | Any] | list[Any] | tuple[Any, ...]:
    ...

tensor_tree_map = ...
