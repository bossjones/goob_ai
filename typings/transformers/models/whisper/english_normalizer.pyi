"""
This type stub file was generated by pyright.
"""

from typing import Iterator, List

ADDITIONAL_DIACRITICS = ...
def remove_symbols_and_diacritics(s: str, keep=...): # -> str:
    """
    Replace any other markers, symbols, and punctuations with a space, and drop any diacritics (category 'Mn' and some
    manual mappings)
    """
    ...

def remove_symbols(s: str): # -> str:
    """
    Replace any other markers, symbols, punctuations with a space, keeping diacritics
    """
    ...

class BasicTextNormalizer:
    def __init__(self, remove_diacritics: bool = ..., split_letters: bool = ...) -> None:
        ...
    
    def __call__(self, s: str): # -> str:
        ...
    


class EnglishNumberNormalizer:
    """
    Convert any spelled-out numbers into arabic numbers, while handling:

    - remove any commas
    - keep the suffixes such as: `1960s`, `274th`, `32nd`, etc.
    - spell out currency symbols after the number. e.g. `$20 million` -> `20000000 dollars`
    - spell out `one` and `ones`
    - interpret successive single-digit numbers as nominal: `one oh one` -> `101`
    """
    def __init__(self) -> None:
        ...
    
    def process_words(self, words: List[str]) -> Iterator[str]:
        ...
    
    def preprocess(self, s: str): # -> str:
        ...
    
    def postprocess(self, s: str): # -> str:
        ...
    
    def __call__(self, s: str): # -> str:
        ...
    


class EnglishSpellingNormalizer:
    """
    Applies British-American spelling mappings as listed in [1].

    [1] https://www.tysto.com/uk-us-spelling-list.html
    """
    def __init__(self, english_spelling_mapping) -> None:
        ...
    
    def __call__(self, s: str): # -> LiteralString:
        ...
    


class EnglishTextNormalizer:
    def __init__(self, english_spelling_mapping) -> None:
        ...
    
    def __call__(self, s: str): # -> str:
        ...
    


