"""
This type stub file was generated by pyright.
"""

import torch
from dataclasses import dataclass
from typing import Optional, Tuple, Union
from torch import nn
from ...file_utils import add_code_sample_docstrings, add_start_docstrings, add_start_docstrings_to_model_forward
from ...modeling_outputs import ImageClassifierOutputWithNoAttention, ModelOutput
from ...modeling_utils import PreTrainedModel
from .configuration_cvt import CvtConfig

""" PyTorch CvT model."""
logger = ...
_CONFIG_FOR_DOC = ...
_CHECKPOINT_FOR_DOC = ...
_EXPECTED_OUTPUT_SHAPE = ...
_IMAGE_CLASS_CHECKPOINT = ...
_IMAGE_CLASS_EXPECTED_OUTPUT = ...
@dataclass
class BaseModelOutputWithCLSToken(ModelOutput):
    """
    Base class for model's outputs, with potential hidden states and attentions.

    Args:
        last_hidden_state (`torch.FloatTensor` of shape `(batch_size, sequence_length, hidden_size)`):
            Sequence of hidden-states at the output of the last layer of the model.
        cls_token_value (`torch.FloatTensor` of shape `(batch_size, 1, hidden_size)`):
            Classification token at the output of the last layer of the model.
        hidden_states (`tuple(torch.FloatTensor)`, *optional*, returned when `output_hidden_states=True` is passed or when `config.output_hidden_states=True`):
            Tuple of `torch.FloatTensor` (one for the output of the embeddings + one for the output of each layer) of
            shape `(batch_size, sequence_length, hidden_size)`. Hidden-states of the model at the output of each layer
            plus the initial embedding outputs.
    """
    last_hidden_state: torch.FloatTensor = ...
    cls_token_value: torch.FloatTensor = ...
    hidden_states: Optional[Tuple[torch.FloatTensor, ...]] = ...


def drop_path(input: torch.Tensor, drop_prob: float = ..., training: bool = ...) -> torch.Tensor:
    """
    Drop paths (Stochastic Depth) per sample (when applied in main path of residual blocks).

    Comment by Ross Wightman: This is the same as the DropConnect impl I created for EfficientNet, etc networks,
    however, the original name is misleading as 'Drop Connect' is a different form of dropout in a separate paper...
    See discussion: https://github.com/tensorflow/tpu/issues/494#issuecomment-532968956 ... I've opted for changing the
    layer and argument names to 'drop path' rather than mix DropConnect as a layer name and use 'survival rate' as the
    argument.
    """
    ...

class CvtDropPath(nn.Module):
    """Drop paths (Stochastic Depth) per sample (when applied in main path of residual blocks)."""
    def __init__(self, drop_prob: Optional[float] = ...) -> None:
        ...
    
    def forward(self, hidden_states: torch.Tensor) -> torch.Tensor:
        ...
    
    def extra_repr(self) -> str:
        ...
    


class CvtEmbeddings(nn.Module):
    """
    Construct the CvT embeddings.
    """
    def __init__(self, patch_size, num_channels, embed_dim, stride, padding, dropout_rate) -> None:
        ...
    
    def forward(self, pixel_values): # -> Any:
        ...
    


class CvtConvEmbeddings(nn.Module):
    """
    Image to Conv Embedding.
    """
    def __init__(self, patch_size, num_channels, embed_dim, stride, padding) -> None:
        ...
    
    def forward(self, pixel_values): # -> Any:
        ...
    


class CvtSelfAttentionConvProjection(nn.Module):
    def __init__(self, embed_dim, kernel_size, padding, stride) -> None:
        ...
    
    def forward(self, hidden_state): # -> Any:
        ...
    


class CvtSelfAttentionLinearProjection(nn.Module):
    def forward(self, hidden_state):
        ...
    


class CvtSelfAttentionProjection(nn.Module):
    def __init__(self, embed_dim, kernel_size, padding, stride, projection_method=...) -> None:
        ...
    
    def forward(self, hidden_state): # -> Any:
        ...
    


class CvtSelfAttention(nn.Module):
    def __init__(self, num_heads, embed_dim, kernel_size, padding_q, padding_kv, stride_q, stride_kv, qkv_projection_method, qkv_bias, attention_drop_rate, with_cls_token=..., **kwargs) -> None:
        ...
    
    def rearrange_for_multi_head_attention(self, hidden_state):
        ...
    
    def forward(self, hidden_state, height, width): # -> Tensor:
        ...
    


class CvtSelfOutput(nn.Module):
    """
    The residual connection is defined in CvtLayer instead of here (as is the case with other models), due to the
    layernorm applied before each block.
    """
    def __init__(self, embed_dim, drop_rate) -> None:
        ...
    
    def forward(self, hidden_state, input_tensor): # -> Any:
        ...
    


class CvtAttention(nn.Module):
    def __init__(self, num_heads, embed_dim, kernel_size, padding_q, padding_kv, stride_q, stride_kv, qkv_projection_method, qkv_bias, attention_drop_rate, drop_rate, with_cls_token=...) -> None:
        ...
    
    def prune_heads(self, heads): # -> None:
        ...
    
    def forward(self, hidden_state, height, width): # -> Any:
        ...
    


class CvtIntermediate(nn.Module):
    def __init__(self, embed_dim, mlp_ratio) -> None:
        ...
    
    def forward(self, hidden_state): # -> Any:
        ...
    


class CvtOutput(nn.Module):
    def __init__(self, embed_dim, mlp_ratio, drop_rate) -> None:
        ...
    
    def forward(self, hidden_state, input_tensor):
        ...
    


class CvtLayer(nn.Module):
    """
    CvtLayer composed by attention layers, normalization and multi-layer perceptrons (mlps).
    """
    def __init__(self, num_heads, embed_dim, kernel_size, padding_q, padding_kv, stride_q, stride_kv, qkv_projection_method, qkv_bias, attention_drop_rate, drop_rate, mlp_ratio, drop_path_rate, with_cls_token=...) -> None:
        ...
    
    def forward(self, hidden_state, height, width): # -> Any:
        ...
    


class CvtStage(nn.Module):
    def __init__(self, config, stage) -> None:
        ...
    
    def forward(self, hidden_state): # -> tuple[torch._tensor.Tensor | Any, torch.functional.Tensor | None]:
        ...
    


class CvtEncoder(nn.Module):
    def __init__(self, config) -> None:
        ...
    
    def forward(self, pixel_values, output_hidden_states=..., return_dict=...): # -> tuple[Any, ...] | BaseModelOutputWithCLSToken:
        ...
    


class CvtPreTrainedModel(PreTrainedModel):
    """
    An abstract class to handle weights initialization and a simple interface for downloading and loading pretrained
    models.
    """
    config_class = CvtConfig
    base_model_prefix = ...
    main_input_name = ...


CVT_START_DOCSTRING = ...
CVT_INPUTS_DOCSTRING = ...
@add_start_docstrings("The bare Cvt Model transformer outputting raw hidden-states without any specific head on top.", CVT_START_DOCSTRING)
class CvtModel(CvtPreTrainedModel):
    def __init__(self, config, add_pooling_layer=...) -> None:
        ...
    
    @add_start_docstrings_to_model_forward(CVT_INPUTS_DOCSTRING)
    @add_code_sample_docstrings(checkpoint=_CHECKPOINT_FOR_DOC, output_type=BaseModelOutputWithCLSToken, config_class=_CONFIG_FOR_DOC, modality="vision", expected_output=_EXPECTED_OUTPUT_SHAPE)
    def forward(self, pixel_values: Optional[torch.Tensor] = ..., output_hidden_states: Optional[bool] = ..., return_dict: Optional[bool] = ...) -> Union[Tuple, BaseModelOutputWithCLSToken]:
        ...
    


@add_start_docstrings("""
    Cvt Model transformer with an image classification head on top (a linear layer on top of the final hidden state of
    the [CLS] token) e.g. for ImageNet.
    """, CVT_START_DOCSTRING)
class CvtForImageClassification(CvtPreTrainedModel):
    def __init__(self, config) -> None:
        ...
    
    @add_start_docstrings_to_model_forward(CVT_INPUTS_DOCSTRING)
    @add_code_sample_docstrings(checkpoint=_IMAGE_CLASS_CHECKPOINT, output_type=ImageClassifierOutputWithNoAttention, config_class=_CONFIG_FOR_DOC, expected_output=_IMAGE_CLASS_EXPECTED_OUTPUT)
    def forward(self, pixel_values: Optional[torch.Tensor] = ..., labels: Optional[torch.Tensor] = ..., output_hidden_states: Optional[bool] = ..., return_dict: Optional[bool] = ...) -> Union[Tuple, ImageClassifierOutputWithNoAttention]:
        r"""
        labels (`torch.LongTensor` of shape `(batch_size,)`, *optional*):
            Labels for computing the image classification/regression loss. Indices should be in `[0, ...,
            config.num_labels - 1]`. If `config.num_labels == 1` a regression loss is computed (Mean-Square loss), If
            `config.num_labels > 1` a classification loss is computed (Cross-Entropy).
        """
        ...
    


