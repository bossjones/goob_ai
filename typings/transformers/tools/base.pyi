"""
This type stub file was generated by pyright.
"""

from typing import Any, Dict, List, Optional, Union
from ..models.auto import AutoProcessor
from ..utils import is_accelerate_available, is_torch_available

logger = ...
if is_torch_available():
    ...
if is_accelerate_available():
    ...
TOOL_CONFIG_FILE = ...
def get_repo_type(repo_id, repo_type=..., **hub_kwargs): # -> Literal['space', 'model']:
    ...

APP_FILE_TEMPLATE = ...
class Tool:
    """
    A base class for the functions used by the agent. Subclass this and implement the `__call__` method as well as the
    following class attributes:

    - **description** (`str`) -- A short description of what your tool does, the inputs it expects and the output(s) it
      will return. For instance 'This is a tool that downloads a file from a `url`. It takes the `url` as input, and
      returns the text contained in the file'.
    - **name** (`str`) -- A performative name that will be used for your tool in the prompt to the agent. For instance
      `"text-classifier"` or `"image_generator"`.
    - **inputs** (`List[str]`) -- The list of modalities expected for the inputs (in the same order as in the call).
      Modalitiies should be `"text"`, `"image"` or `"audio"`. This is only used by `launch_gradio_demo` or to make a
      nice space from your tool.
    - **outputs** (`List[str]`) -- The list of modalities returned but the tool (in the same order as the return of the
      call method). Modalitiies should be `"text"`, `"image"` or `"audio"`. This is only used by `launch_gradio_demo`
      or to make a nice space from your tool.

    You can also override the method [`~Tool.setup`] if your tool as an expensive operation to perform before being
    usable (such as loading a model). [`~Tool.setup`] will be called the first time you use your tool, but not at
    instantiation.
    """
    description: str = ...
    name: str = ...
    inputs: List[str]
    outputs: List[str]
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    def __call__(self, *args, **kwargs):
        ...
    
    def setup(self): # -> None:
        """
        Overwrite this method here for any operation that is expensive and needs to be executed before you start using
        your tool. Such as loading a big model.
        """
        ...
    
    def save(self, output_dir): # -> None:
        """
        Saves the relevant code files for your tool so it can be pushed to the Hub. This will copy the code of your
        tool in `output_dir` as well as autogenerate:

        - a config file named `tool_config.json`
        - an `app.py` file so that your tool can be converted to a space
        - a `requirements.txt` containing the names of the module used by your tool (as detected when inspecting its
          code)

        You should only use this method to save tools that are defined in a separate module (not `__main__`).

        Args:
            output_dir (`str`): The folder in which you want to save your tool.
        """
        ...
    
    @classmethod
    def from_hub(cls, repo_id: str, model_repo_id: Optional[str] = ..., token: Optional[str] = ..., remote: bool = ..., **kwargs): # -> RemoteTool | Any:
        """
        Loads a tool defined on the Hub.

        <Tip warning={true}>

        Loading a tool from the Hub means that you'll download the tool and execute it locally.
        ALWAYS inspect the tool you're downloading before loading it within your runtime, as you would do when
        installing a package using pip/npm/apt.

        </Tip>

        Args:
            repo_id (`str`):
                The name of the repo on the Hub where your tool is defined.
            model_repo_id (`str`, *optional*):
                If your tool uses a model and you want to use a different model than the default, you can pass a second
                repo ID or an endpoint url to this argument.
            token (`str`, *optional*):
                The token to identify you on hf.co. If unset, will use the token generated when running
                `huggingface-cli login` (stored in `~/.huggingface`).
            remote (`bool`, *optional*, defaults to `False`):
                Whether to use your tool by downloading the model or (if it is available) with an inference endpoint.
            kwargs (additional keyword arguments, *optional*):
                Additional keyword arguments that will be split in two: all arguments relevant to the Hub (such as
                `cache_dir`, `revision`, `subfolder`) will be used when downloading the files for your tool, and the
                others will be passed along to its init.
        """
        ...
    
    def push_to_hub(self, repo_id: str, commit_message: str = ..., private: Optional[bool] = ..., token: Optional[Union[bool, str]] = ..., create_pr: bool = ...) -> str:
        """
        Upload the tool to the Hub.

        Parameters:
            repo_id (`str`):
                The name of the repository you want to push your tool to. It should contain your organization name when
                pushing to a given organization.
            commit_message (`str`, *optional*, defaults to `"Upload tool"`):
                Message to commit while pushing.
            private (`bool`, *optional*):
                Whether or not the repository created should be private.
            token (`bool` or `str`, *optional*):
                The token to use as HTTP bearer authorization for remote files. If unset, will use the token generated
                when running `huggingface-cli login` (stored in `~/.huggingface`).
            create_pr (`bool`, *optional*, defaults to `False`):
                Whether or not to create a PR with the uploaded files or directly commit.
        """
        ...
    
    @staticmethod
    def from_gradio(gradio_tool): # -> GradioToolWrapper:
        """
        Creates a [`Tool`] from a gradio tool.
        """
        class GradioToolWrapper(Tool):
            ...
        
        
    


class RemoteTool(Tool):
    """
    A [`Tool`] that will make requests to an inference endpoint.

    Args:
        endpoint_url (`str`, *optional*):
            The url of the endpoint to use.
        token (`str`, *optional*):
            The token to use as HTTP bearer authorization for remote files. If unset, will use the token generated when
            running `huggingface-cli login` (stored in `~/.huggingface`).
        tool_class (`type`, *optional*):
            The corresponding `tool_class` if this is a remote version of an existing tool. Will help determine when
            the output should be converted to another type (like images).
    """
    def __init__(self, endpoint_url=..., token=..., tool_class=...) -> None:
        ...
    
    def prepare_inputs(self, *args, **kwargs): # -> dict[str, str] | dict[str, Any] | dict[str, dict[str, Any]]:
        """
        Prepare the inputs received for the HTTP client sending data to the endpoint. Positional arguments will be
        matched with the signature of the `tool_class` if it was provided at instantation. Images will be encoded into
        bytes.

        You can override this method in your custom class of [`RemoteTool`].
        """
        ...
    
    def extract_outputs(self, outputs):
        """
        You can override this method in your custom class of [`RemoteTool`] to apply some custom post-processing of the
        outputs of the endpoint.
        """
        ...
    
    def __call__(self, *args, **kwargs): # -> AgentText | AgentType | list[Any] | tuple[Any, ...] | dict[Any, Any]:
        ...
    


class PipelineTool(Tool):
    """
    A [`Tool`] tailored towards Transformer models. On top of the class attributes of the base class [`Tool`], you will
    need to specify:

    - **model_class** (`type`) -- The class to use to load the model in this tool.
    - **default_checkpoint** (`str`) -- The default checkpoint that should be used when the user doesn't specify one.
    - **pre_processor_class** (`type`, *optional*, defaults to [`AutoProcessor`]) -- The class to use to load the
      pre-processor
    - **post_processor_class** (`type`, *optional*, defaults to [`AutoProcessor`]) -- The class to use to load the
      post-processor (when different from the pre-processor).

    Args:
        model (`str` or [`PreTrainedModel`], *optional*):
            The name of the checkpoint to use for the model, or the instantiated model. If unset, will default to the
            value of the class attribute `default_checkpoint`.
        pre_processor (`str` or `Any`, *optional*):
            The name of the checkpoint to use for the pre-processor, or the instantiated pre-processor (can be a
            tokenizer, an image processor, a feature extractor or a processor). Will default to the value of `model` if
            unset.
        post_processor (`str` or `Any`, *optional*):
            The name of the checkpoint to use for the post-processor, or the instantiated pre-processor (can be a
            tokenizer, an image processor, a feature extractor or a processor). Will default to the `pre_processor` if
            unset.
        device (`int`, `str` or `torch.device`, *optional*):
            The device on which to execute the model. Will default to any accelerator available (GPU, MPS etc...), the
            CPU otherwise.
        device_map (`str` or `dict`, *optional*):
            If passed along, will be used to instantiate the model.
        model_kwargs (`dict`, *optional*):
            Any keyword argument to send to the model instantiation.
        token (`str`, *optional*):
            The token to use as HTTP bearer authorization for remote files. If unset, will use the token generated when
            running `huggingface-cli login` (stored in `~/.huggingface`).
        hub_kwargs (additional keyword arguments, *optional*):
            Any additional keyword argument to send to the methods that will load the data from the Hub.
    """
    pre_processor_class = AutoProcessor
    model_class = ...
    post_processor_class = AutoProcessor
    default_checkpoint = ...
    def __init__(self, model=..., pre_processor=..., post_processor=..., device=..., device_map=..., model_kwargs=..., token=..., **hub_kwargs) -> None:
        ...
    
    def setup(self): # -> None:
        """
        Instantiates the `pre_processor`, `model` and `post_processor` if necessary.
        """
        ...
    
    def encode(self, raw_inputs):
        """
        Uses the `pre_processor` to prepare the inputs for the `model`.
        """
        ...
    
    def forward(self, inputs):
        """
        Sends the inputs through the `model`.
        """
        ...
    
    def decode(self, outputs):
        """
        Uses the `post_processor` to decode the model output.
        """
        ...
    
    def __call__(self, *args, **kwargs): # -> AgentText | AgentType | list[Any] | tuple[Any, ...] | dict[Any, Any]:
        ...
    


def launch_gradio_demo(tool_class: Tool): # -> None:
    """
    Launches a gradio demo for a tool. The corresponding tool class needs to properly implement the class attributes
    `inputs` and `outputs`.

    Args:
        tool_class (`type`): The class of the tool for which to launch the demo.
    """
    ...

TASK_MAPPING = ...
def get_default_endpoints(): # -> Any:
    ...

def supports_remote(task_or_repo_id): # -> bool:
    ...

def load_tool(task_or_repo_id, model_repo_id=..., remote=..., token=..., **kwargs): # -> RemoteTool | Any:
    """
    Main function to quickly load a tool, be it on the Hub or in the Transformers library.

    <Tip warning={true}>

    Loading a tool means that you'll download the tool and execute it locally.
    ALWAYS inspect the tool you're downloading before loading it within your runtime, as you would do when
    installing a package using pip/npm/apt.

    </Tip>

    Args:
        task_or_repo_id (`str`):
            The task for which to load the tool or a repo ID of a tool on the Hub. Tasks implemented in Transformers
            are:

            - `"document-question-answering"`
            - `"image-captioning"`
            - `"image-question-answering"`
            - `"image-segmentation"`
            - `"speech-to-text"`
            - `"summarization"`
            - `"text-classification"`
            - `"text-question-answering"`
            - `"text-to-speech"`
            - `"translation"`

        model_repo_id (`str`, *optional*):
            Use this argument to use a different model than the default one for the tool you selected.
        remote (`bool`, *optional*, defaults to `False`):
            Whether to use your tool by downloading the model or (if it is available) with an inference endpoint.
        token (`str`, *optional*):
            The token to identify you on hf.co. If unset, will use the token generated when running `huggingface-cli
            login` (stored in `~/.huggingface`).
        kwargs (additional keyword arguments, *optional*):
            Additional keyword arguments that will be split in two: all arguments relevant to the Hub (such as
            `cache_dir`, `revision`, `subfolder`) will be used when downloading the files for your tool, and the others
            will be passed along to its init.
    """
    ...

def add_description(description): # -> Callable[..., Any]:
    """
    A decorator that adds a description to a function.
    """
    ...

class EndpointClient:
    def __init__(self, endpoint_url: str, token: Optional[str] = ...) -> None:
        ...
    
    @staticmethod
    def encode_image(image): # -> str:
        ...
    
    @staticmethod
    def decode_image(raw_image): # -> Image:
        ...
    
    def __call__(self, inputs: Optional[Union[str, Dict, List[str], List[List[str]]]] = ..., params: Optional[Dict] = ..., data: Optional[bytes] = ..., output_image: bool = ...) -> Any:
        ...
    


