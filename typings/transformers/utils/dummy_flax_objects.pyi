"""
This type stub file was generated by pyright.
"""

from ..utils import DummyObject

class FlaxForcedBOSTokenLogitsProcessor(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class FlaxForcedEOSTokenLogitsProcessor(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class FlaxForceTokensLogitsProcessor(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class FlaxGenerationMixin(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class FlaxLogitsProcessor(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class FlaxLogitsProcessorList(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class FlaxLogitsWarper(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class FlaxMinLengthLogitsProcessor(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class FlaxSuppressTokensAtBeginLogitsProcessor(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class FlaxSuppressTokensLogitsProcessor(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class FlaxTemperatureLogitsWarper(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class FlaxTopKLogitsWarper(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class FlaxTopPLogitsWarper(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class FlaxWhisperTimeStampLogitsProcessor(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class FlaxPreTrainedModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class FlaxAlbertForMaskedLM(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class FlaxAlbertForMultipleChoice(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class FlaxAlbertForPreTraining(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class FlaxAlbertForQuestionAnswering(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class FlaxAlbertForSequenceClassification(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class FlaxAlbertForTokenClassification(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class FlaxAlbertModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class FlaxAlbertPreTrainedModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


FLAX_MODEL_FOR_AUDIO_CLASSIFICATION_MAPPING = ...
FLAX_MODEL_FOR_CAUSAL_LM_MAPPING = ...
FLAX_MODEL_FOR_IMAGE_CLASSIFICATION_MAPPING = ...
FLAX_MODEL_FOR_MASKED_LM_MAPPING = ...
FLAX_MODEL_FOR_MULTIPLE_CHOICE_MAPPING = ...
FLAX_MODEL_FOR_NEXT_SENTENCE_PREDICTION_MAPPING = ...
FLAX_MODEL_FOR_PRETRAINING_MAPPING = ...
FLAX_MODEL_FOR_QUESTION_ANSWERING_MAPPING = ...
FLAX_MODEL_FOR_SEQ_TO_SEQ_CAUSAL_LM_MAPPING = ...
FLAX_MODEL_FOR_SEQUENCE_CLASSIFICATION_MAPPING = ...
FLAX_MODEL_FOR_SPEECH_SEQ_2_SEQ_MAPPING = ...
FLAX_MODEL_FOR_TOKEN_CLASSIFICATION_MAPPING = ...
FLAX_MODEL_FOR_VISION_2_SEQ_MAPPING = ...
FLAX_MODEL_MAPPING = ...
class FlaxAutoModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class FlaxAutoModelForCausalLM(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class FlaxAutoModelForImageClassification(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class FlaxAutoModelForMaskedLM(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class FlaxAutoModelForMultipleChoice(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class FlaxAutoModelForNextSentencePrediction(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class FlaxAutoModelForPreTraining(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class FlaxAutoModelForQuestionAnswering(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class FlaxAutoModelForSeq2SeqLM(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class FlaxAutoModelForSequenceClassification(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class FlaxAutoModelForSpeechSeq2Seq(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class FlaxAutoModelForTokenClassification(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class FlaxAutoModelForVision2Seq(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class FlaxBartDecoderPreTrainedModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class FlaxBartForCausalLM(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class FlaxBartForConditionalGeneration(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class FlaxBartForQuestionAnswering(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class FlaxBartForSequenceClassification(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class FlaxBartModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class FlaxBartPreTrainedModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class FlaxBeitForImageClassification(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class FlaxBeitForMaskedImageModeling(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class FlaxBeitModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class FlaxBeitPreTrainedModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class FlaxBertForCausalLM(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class FlaxBertForMaskedLM(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class FlaxBertForMultipleChoice(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class FlaxBertForNextSentencePrediction(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class FlaxBertForPreTraining(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class FlaxBertForQuestionAnswering(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class FlaxBertForSequenceClassification(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class FlaxBertForTokenClassification(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class FlaxBertModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class FlaxBertPreTrainedModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class FlaxBigBirdForCausalLM(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class FlaxBigBirdForMaskedLM(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class FlaxBigBirdForMultipleChoice(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class FlaxBigBirdForPreTraining(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class FlaxBigBirdForQuestionAnswering(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class FlaxBigBirdForSequenceClassification(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class FlaxBigBirdForTokenClassification(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class FlaxBigBirdModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class FlaxBigBirdPreTrainedModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class FlaxBlenderbotForConditionalGeneration(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class FlaxBlenderbotModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class FlaxBlenderbotPreTrainedModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class FlaxBlenderbotSmallForConditionalGeneration(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class FlaxBlenderbotSmallModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class FlaxBlenderbotSmallPreTrainedModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class FlaxBloomForCausalLM(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class FlaxBloomModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class FlaxBloomPreTrainedModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class FlaxCLIPModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class FlaxCLIPPreTrainedModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class FlaxCLIPTextModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class FlaxCLIPTextModelWithProjection(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class FlaxCLIPTextPreTrainedModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class FlaxCLIPVisionModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class FlaxCLIPVisionPreTrainedModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class FlaxDistilBertForMaskedLM(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class FlaxDistilBertForMultipleChoice(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class FlaxDistilBertForQuestionAnswering(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class FlaxDistilBertForSequenceClassification(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class FlaxDistilBertForTokenClassification(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class FlaxDistilBertModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class FlaxDistilBertPreTrainedModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class FlaxElectraForCausalLM(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class FlaxElectraForMaskedLM(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class FlaxElectraForMultipleChoice(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class FlaxElectraForPreTraining(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class FlaxElectraForQuestionAnswering(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class FlaxElectraForSequenceClassification(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class FlaxElectraForTokenClassification(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class FlaxElectraModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class FlaxElectraPreTrainedModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class FlaxEncoderDecoderModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class FlaxGemmaForCausalLM(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class FlaxGemmaModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class FlaxGemmaPreTrainedModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class FlaxGPT2LMHeadModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class FlaxGPT2Model(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class FlaxGPT2PreTrainedModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class FlaxGPTNeoForCausalLM(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class FlaxGPTNeoModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class FlaxGPTNeoPreTrainedModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class FlaxGPTJForCausalLM(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class FlaxGPTJModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class FlaxGPTJPreTrainedModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class FlaxLlamaForCausalLM(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class FlaxLlamaModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class FlaxLlamaPreTrainedModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class FlaxLongT5ForConditionalGeneration(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class FlaxLongT5Model(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class FlaxLongT5PreTrainedModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class FlaxMarianModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class FlaxMarianMTModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class FlaxMarianPreTrainedModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class FlaxMBartForConditionalGeneration(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class FlaxMBartForQuestionAnswering(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class FlaxMBartForSequenceClassification(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class FlaxMBartModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class FlaxMBartPreTrainedModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class FlaxMistralForCausalLM(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class FlaxMistralModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class FlaxMistralPreTrainedModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class FlaxMT5EncoderModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class FlaxMT5ForConditionalGeneration(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class FlaxMT5Model(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class FlaxOPTForCausalLM(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class FlaxOPTModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class FlaxOPTPreTrainedModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class FlaxPegasusForConditionalGeneration(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class FlaxPegasusModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class FlaxPegasusPreTrainedModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class FlaxRegNetForImageClassification(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class FlaxRegNetModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class FlaxRegNetPreTrainedModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class FlaxResNetForImageClassification(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class FlaxResNetModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class FlaxResNetPreTrainedModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class FlaxRobertaForCausalLM(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class FlaxRobertaForMaskedLM(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class FlaxRobertaForMultipleChoice(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class FlaxRobertaForQuestionAnswering(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class FlaxRobertaForSequenceClassification(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class FlaxRobertaForTokenClassification(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class FlaxRobertaModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class FlaxRobertaPreTrainedModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class FlaxRobertaPreLayerNormForCausalLM(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class FlaxRobertaPreLayerNormForMaskedLM(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class FlaxRobertaPreLayerNormForMultipleChoice(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class FlaxRobertaPreLayerNormForQuestionAnswering(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class FlaxRobertaPreLayerNormForSequenceClassification(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class FlaxRobertaPreLayerNormForTokenClassification(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class FlaxRobertaPreLayerNormModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class FlaxRobertaPreLayerNormPreTrainedModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class FlaxRoFormerForMaskedLM(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class FlaxRoFormerForMultipleChoice(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class FlaxRoFormerForQuestionAnswering(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class FlaxRoFormerForSequenceClassification(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class FlaxRoFormerForTokenClassification(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class FlaxRoFormerModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class FlaxRoFormerPreTrainedModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class FlaxSpeechEncoderDecoderModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class FlaxT5EncoderModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class FlaxT5ForConditionalGeneration(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class FlaxT5Model(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class FlaxT5PreTrainedModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class FlaxVisionEncoderDecoderModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class FlaxVisionTextDualEncoderModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class FlaxViTForImageClassification(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class FlaxViTModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class FlaxViTPreTrainedModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class FlaxWav2Vec2ForCTC(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class FlaxWav2Vec2ForPreTraining(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class FlaxWav2Vec2Model(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class FlaxWav2Vec2PreTrainedModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class FlaxWhisperForAudioClassification(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class FlaxWhisperForConditionalGeneration(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class FlaxWhisperModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class FlaxWhisperPreTrainedModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class FlaxXGLMForCausalLM(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class FlaxXGLMModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class FlaxXGLMPreTrainedModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


FLAX_XLM_ROBERTA_PRETRAINED_MODEL_ARCHIVE_LIST = ...
class FlaxXLMRobertaForCausalLM(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class FlaxXLMRobertaForMaskedLM(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class FlaxXLMRobertaForMultipleChoice(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class FlaxXLMRobertaForQuestionAnswering(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class FlaxXLMRobertaForSequenceClassification(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class FlaxXLMRobertaForTokenClassification(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class FlaxXLMRobertaModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class FlaxXLMRobertaPreTrainedModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


