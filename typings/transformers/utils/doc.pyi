"""
This type stub file was generated by pyright.
"""

"""
Doc utilities: Utilities related to documentation
"""
def add_start_docstrings(*docstr): # -> Callable[..., Any]:
    ...

def add_start_docstrings_to_model_forward(*docstr): # -> Callable[..., Any]:
    ...

def add_end_docstrings(*docstr): # -> Callable[..., Any]:
    ...

PT_RETURN_INTRODUCTION = ...
TF_RETURN_INTRODUCTION = ...
FAKE_MODEL_DISCLAIMER = ...
PT_TOKEN_CLASSIFICATION_SAMPLE = ...
PT_QUESTION_ANSWERING_SAMPLE = ...
PT_SEQUENCE_CLASSIFICATION_SAMPLE = ...
PT_MASKED_LM_SAMPLE = ...
PT_BASE_MODEL_SAMPLE = ...
PT_MULTIPLE_CHOICE_SAMPLE = ...
PT_CAUSAL_LM_SAMPLE = ...
PT_SPEECH_BASE_MODEL_SAMPLE = ...
PT_SPEECH_CTC_SAMPLE = ...
PT_SPEECH_SEQ_CLASS_SAMPLE = ...
PT_SPEECH_FRAME_CLASS_SAMPLE = ...
PT_SPEECH_XVECTOR_SAMPLE = ...
PT_VISION_BASE_MODEL_SAMPLE = ...
PT_VISION_SEQ_CLASS_SAMPLE = ...
PT_SAMPLE_DOCSTRINGS = ...
TF_TOKEN_CLASSIFICATION_SAMPLE = ...
TF_QUESTION_ANSWERING_SAMPLE = ...
TF_SEQUENCE_CLASSIFICATION_SAMPLE = ...
TF_MASKED_LM_SAMPLE = ...
TF_BASE_MODEL_SAMPLE = ...
TF_MULTIPLE_CHOICE_SAMPLE = ...
TF_CAUSAL_LM_SAMPLE = ...
TF_SPEECH_BASE_MODEL_SAMPLE = ...
TF_SPEECH_CTC_SAMPLE = ...
TF_VISION_BASE_MODEL_SAMPLE = ...
TF_VISION_SEQ_CLASS_SAMPLE = ...
TF_SAMPLE_DOCSTRINGS = ...
FLAX_TOKEN_CLASSIFICATION_SAMPLE = ...
FLAX_QUESTION_ANSWERING_SAMPLE = ...
FLAX_SEQUENCE_CLASSIFICATION_SAMPLE = ...
FLAX_MASKED_LM_SAMPLE = ...
FLAX_BASE_MODEL_SAMPLE = ...
FLAX_MULTIPLE_CHOICE_SAMPLE = ...
FLAX_CAUSAL_LM_SAMPLE = ...
FLAX_SAMPLE_DOCSTRINGS = ...
def filter_outputs_from_example(docstring, **kwargs): # -> str:
    """
    Removes the lines testing an output with the doctest syntax in a code sample when it's set to `None`.
    """
    ...

def add_code_sample_docstrings(*docstr, processor_class=..., checkpoint=..., output_type=..., config_class=..., mask=..., qa_target_start_index=..., qa_target_end_index=..., model_cls=..., modality=..., expected_output=..., expected_loss=..., real_checkpoint=..., revision=...): # -> Callable[..., Any]:
    ...

def replace_return_docstrings(output_type=..., config_class=...): # -> Callable[..., Any]:
    ...

def copy_func(f): # -> _Wrapped[Callable[..., Any], Any, Callable[..., Any], Any]:
    """Returns a copy of a function f."""
    ...

