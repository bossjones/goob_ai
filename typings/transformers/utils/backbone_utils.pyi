"""
This type stub file was generated by pyright.
"""

import enum
from typing import Iterable, List, Optional, Tuple, Union

""" Collection of utils to be used by backbones and their components."""
class BackboneType(enum.Enum):
    TIMM = ...
    TRANSFORMERS = ...


def verify_out_features_out_indices(out_features: Optional[Iterable[str]], out_indices: Optional[Iterable[int]], stage_names: Optional[Iterable[str]]): # -> None:
    """
    Verify that out_indices and out_features are valid for the given stage_names.
    """
    ...

def get_aligned_output_features_output_indices(out_features: Optional[List[str]], out_indices: Optional[Union[List[int], Tuple[int]]], stage_names: List[str]) -> Tuple[List[str], List[int]]:
    """
    Get the `out_features` and `out_indices` so that they are aligned.

    The logic is as follows:
        - `out_features` not set, `out_indices` set: `out_features` is set to the `out_features` corresponding to the
        `out_indices`.
        - `out_indices` not set, `out_features` set: `out_indices` is set to the `out_indices` corresponding to the
        `out_features`.
        - `out_indices` and `out_features` not set: `out_indices` and `out_features` are set to the last stage.
        - `out_indices` and `out_features` set: they are verified to be aligned.

    Args:
        out_features (`List[str]`): The names of the features for the backbone to output.
        out_indices (`List[int]` or `Tuple[int]`): The indices of the features for the backbone to output.
        stage_names (`List[str]`): The names of the stages of the backbone.
    """
    ...

class BackboneMixin:
    backbone_type: Optional[BackboneType] = ...
    @property
    def out_features(self): # -> List[str]:
        ...
    
    @out_features.setter
    def out_features(self, out_features: List[str]): # -> None:
        """
        Set the out_features attribute. This will also update the out_indices attribute to match the new out_features.
        """
        ...
    
    @property
    def out_indices(self): # -> List[int]:
        ...
    
    @out_indices.setter
    def out_indices(self, out_indices: Union[Tuple[int], List[int]]): # -> None:
        """
        Set the out_indices attribute. This will also update the out_features attribute to match the new out_indices.
        """
        ...
    
    @property
    def out_feature_channels(self): # -> dict[Any, Any]:
        ...
    
    @property
    def channels(self): # -> list[Any]:
        ...
    
    def forward_with_filtered_kwargs(self, *args, **kwargs):
        ...
    
    def forward(self, pixel_values, output_hidden_states: Optional[bool] = ..., output_attentions: Optional[bool] = ..., return_dict: Optional[bool] = ...):
        ...
    
    def to_dict(self):
        """
        Serializes this instance to a Python dictionary. Override the default `to_dict()` from `PretrainedConfig` to
        include the `out_features` and `out_indices` attributes.
        """
        ...
    


class BackboneConfigMixin:
    """
    A Mixin to support handling the `out_features` and `out_indices` attributes for the backbone configurations.
    """
    @property
    def out_features(self): # -> List[str]:
        ...
    
    @out_features.setter
    def out_features(self, out_features: List[str]): # -> None:
        """
        Set the out_features attribute. This will also update the out_indices attribute to match the new out_features.
        """
        ...
    
    @property
    def out_indices(self): # -> List[int]:
        ...
    
    @out_indices.setter
    def out_indices(self, out_indices: Union[Tuple[int], List[int]]): # -> None:
        """
        Set the out_indices attribute. This will also update the out_features attribute to match the new out_indices.
        """
        ...
    
    def to_dict(self):
        """
        Serializes this instance to a Python dictionary. Override the default `to_dict()` from `PretrainedConfig` to
        include the `out_features` and `out_indices` attributes.
        """
        ...
    


def load_backbone(config):
    """
    Loads the backbone model from a config object.

    If the config is from the backbone model itself, then we return a backbone model with randomly initialized
    weights.

    If the config is from the parent model of the backbone model itself, then we load the pretrained backbone weights
    if specified.
    """
    ...

