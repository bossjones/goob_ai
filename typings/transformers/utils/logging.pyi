"""
This type stub file was generated by pyright.
"""

import functools
import logging
from typing import Optional

""" Logging utilities."""
_lock = ...
_default_handler: Optional[logging.Handler] = ...
log_levels = ...
_default_log_level = ...
_tqdm_active = ...
def get_log_levels_dict(): # -> dict[str, int]:
    ...

def captureWarnings(capture): # -> None:
    """
    Calls the `captureWarnings` method from the logging library to enable management of the warnings emitted by the
    `warnings` library.

    Read more about this method here:
    https://docs.python.org/3/library/logging.html#integration-with-the-warnings-module

    All warnings will be logged through the `py.warnings` logger.

    Careful: this method also adds a handler to this logger if it does not already have one, and updates the logging
    level of that logger to the library's root logger.
    """
    ...

def get_logger(name: Optional[str] = ...) -> logging.Logger:
    """
    Return a logger with the specified name.

    This function is not supposed to be directly accessed unless you are writing a custom transformers module.
    """
    ...

def get_verbosity() -> int:
    """
    Return the current level for the ðŸ¤— Transformers's root logger as an int.

    Returns:
        `int`: The logging level.

    <Tip>

    ðŸ¤— Transformers has following logging levels:

    - 50: `transformers.logging.CRITICAL` or `transformers.logging.FATAL`
    - 40: `transformers.logging.ERROR`
    - 30: `transformers.logging.WARNING` or `transformers.logging.WARN`
    - 20: `transformers.logging.INFO`
    - 10: `transformers.logging.DEBUG`

    </Tip>"""
    ...

def set_verbosity(verbosity: int) -> None:
    """
    Set the verbosity level for the ðŸ¤— Transformers's root logger.

    Args:
        verbosity (`int`):
            Logging level, e.g., one of:

            - `transformers.logging.CRITICAL` or `transformers.logging.FATAL`
            - `transformers.logging.ERROR`
            - `transformers.logging.WARNING` or `transformers.logging.WARN`
            - `transformers.logging.INFO`
            - `transformers.logging.DEBUG`
    """
    ...

def set_verbosity_info(): # -> None:
    """Set the verbosity to the `INFO` level."""
    ...

def set_verbosity_warning(): # -> None:
    """Set the verbosity to the `WARNING` level."""
    ...

def set_verbosity_debug(): # -> None:
    """Set the verbosity to the `DEBUG` level."""
    ...

def set_verbosity_error(): # -> None:
    """Set the verbosity to the `ERROR` level."""
    ...

def disable_default_handler() -> None:
    """Disable the default handler of the HuggingFace Transformers's root logger."""
    ...

def enable_default_handler() -> None:
    """Enable the default handler of the HuggingFace Transformers's root logger."""
    ...

def add_handler(handler: logging.Handler) -> None:
    """adds a handler to the HuggingFace Transformers's root logger."""
    ...

def remove_handler(handler: logging.Handler) -> None:
    """removes given handler from the HuggingFace Transformers's root logger."""
    ...

def disable_propagation() -> None:
    """
    Disable propagation of the library log outputs. Note that log propagation is disabled by default.
    """
    ...

def enable_propagation() -> None:
    """
    Enable propagation of the library log outputs. Please disable the HuggingFace Transformers's default handler to
    prevent double logging if the root logger has been configured.
    """
    ...

def enable_explicit_format() -> None:
    """
    Enable explicit formatting for every HuggingFace Transformers's logger. The explicit formatter is as follows:
    ```
        [LEVELNAME|FILENAME|LINE NUMBER] TIME >> MESSAGE
    ```
    All handlers currently bound to the root logger are affected by this method.
    """
    ...

def reset_format() -> None:
    """
    Resets the formatting for HuggingFace Transformers's loggers.

    All handlers currently bound to the root logger are affected by this method.
    """
    ...

def warning_advice(self, *args, **kwargs): # -> None:
    """
    This method is identical to `logger.warning()`, but if env var TRANSFORMERS_NO_ADVISORY_WARNINGS=1 is set, this
    warning will not be printed
    """
    ...

@functools.lru_cache(None)
def warning_once(self, *args, **kwargs): # -> None:
    """
    This method is identical to `logger.warning()`, but will emit the warning with the same message only once

    Note: The cache is for the function arguments, so 2 different callers using the same arguments will hit the cache.
    The assumption here is that all warning messages are unique across the code. If they aren't then need to switch to
    another type of cache that includes the caller frame information in the hashing function.
    """
    ...

class EmptyTqdm:
    """Dummy tqdm which doesn't do anything."""
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    def __iter__(self):
        ...
    
    def __getattr__(self, _): # -> Callable[..., None]:
        """Return empty function."""
        ...
    
    def __enter__(self): # -> Self:
        ...
    
    def __exit__(self, type_, value, traceback): # -> None:
        ...
    


class _tqdm_cls:
    def __call__(self, *args, **kwargs): # -> tqdm | EmptyTqdm:
        ...
    
    def set_lock(self, *args, **kwargs): # -> None:
        ...
    
    def get_lock(self): # -> None:
        ...
    


tqdm = ...
def is_progress_bar_enabled() -> bool:
    """Return a boolean indicating whether tqdm progress bars are enabled."""
    ...

def enable_progress_bar(): # -> None:
    """Enable tqdm progress bar."""
    ...

def disable_progress_bar(): # -> None:
    """Disable tqdm progress bar."""
    ...

