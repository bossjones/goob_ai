"""
This type stub file was generated by pyright.
"""

import argparse
from typing import Dict, Optional, Tuple
from pathlib import Path

"""
The MIT License (MIT)

Copyright (c) 2015-present Rapptz

Permission is hereby granted, free of charge, to any person obtaining a
copy of this software and associated documentation files (the "Software"),
to deal in the Software without restriction, including without limitation
the rights to use, copy, modify, merge, publish, distribute, sublicense,
and/or sell copies of the Software, and to permit persons to whom the
Software is furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.
"""
def show_version() -> None:
    ...

def core(parser: argparse.ArgumentParser, args: argparse.Namespace) -> None:
    ...

_bot_template = ...
_gitignore_template = ...
_cog_template = ...
_cog_extras = ...
_base_table: Dict[str, Optional[str]] = ...
_translation_table = ...
def to_path(parser: argparse.ArgumentParser, name: str, *, replace_spaces: bool = ...) -> Path:
    ...

def newbot(parser: argparse.ArgumentParser, args: argparse.Namespace) -> None:
    ...

def newcog(parser: argparse.ArgumentParser, args: argparse.Namespace) -> None:
    ...

def add_newbot_args(subparser: argparse._SubParsersAction[argparse.ArgumentParser]) -> None:
    ...

def add_newcog_args(subparser: argparse._SubParsersAction[argparse.ArgumentParser]) -> None:
    ...

def parse_args() -> Tuple[argparse.ArgumentParser, argparse.Namespace]:
    ...

def main() -> None:
    ...

if __name__ == '__main__':
    ...
