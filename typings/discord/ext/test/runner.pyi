"""
This type stub file was generated by pyright.
"""

import discord
import typing
import pathlib
from . import _types
from .utils import PeekableQueue

"""
    Main module for setting up and running tests using dpytest.
    Handles configuration of a bot, and setup of the discord environment.

    All public functions in this module are re-exported at ``discord.ext.test``, this is the primary
    entry point for users of the library and most of what they should interact with

    See also:
        :mod:`discord.ext.test.verify`
"""
class RunnerConfig(typing.NamedTuple):
    """
        Exposed discord test configuration
        Contains the current client, and lists of faked objects
    """
    client: discord.Client
    guilds: typing.List[discord.Guild]
    channels: typing.List[discord.abc.GuildChannel]
    members: typing.List[discord.Member]
    ...


log = ...
_cur_config: typing.Optional[RunnerConfig] = ...
sent_queue: PeekableQueue = ...
error_queue: PeekableQueue = ...
def require_config(func: typing.Callable[..., _types.T]) -> typing.Callable[..., _types.T]:
    """
        Decorator to enforce that configuration is completed before the decorated function is
        called.

    :param func: Function to decorate
    :return: Function with added check for configuration being setup
    """
    ...

async def run_all_events() -> None:
    """
        Ensure that all dpy related coroutines have completed or been cancelled. If any dpy coroutines
        are currently running, this will also wait for those.
    """
    ...

async def finish_on_command_error() -> None:
    """
        Ensure that all dpy related coroutines have completed or been cancelled. This will only
        wait for dpy related coroutines, not any other coroutines currently running.
    """
    ...

def get_message(peek: bool = ...) -> discord.Message:
    """
        Allow the user to retrieve the most recent message sent by the bot

    :param peek: If true, message will not be removed from the queue
    :return: Most recent message from the queue
    """
    ...

def get_embed(peek: bool = ...) -> discord.Embed:
    """
        Allow the user to retrieve an embed in a message sent by the bot

    :param peek: do not remove the message from the queue of messages
    :return: Embed of the most recent message in the queue
    """
    ...

async def empty_queue() -> None:
    """
        Empty the current message queue. Waits for all events to complete to ensure queue
        is not immediately added to after running.
    """
    ...

counter = ...
@require_config
async def message(content: str, channel: typing.Union[_types.AnyChannel, int] = ..., member: typing.Union[discord.Member, int] = ..., attachments: typing.List[typing.Union[pathlib.Path, str]] = ...) -> discord.Message:
    """
        Fake a message being sent by some user to a channel.

    :param content: Content of the message
    :param channel: Channel to send to, or index into the config list
    :param member: Member sending the message, or index into the config list
    :param attachments: Message attachments to include, as file paths.
    :return: New message that was sent
    """
    ...

@require_config
async def set_permission_overrides(target: typing.Union[discord.User, discord.Role], channel: discord.abc.GuildChannel, overrides: typing.Optional[discord.PermissionOverwrite] = ..., **kwargs: typing.Any) -> None:
    """
        Set the permission override for a channel, as if set by another user.

    :param target: User or Role the permissions override is being set for
    :param channel: Channel the permissions are being set on
    :param overrides: The permissions to use, as an object. Conflicts with using ``kwargs``
    :param kwargs: The permissions to use, as a set of keys and values. Conflicts with using ``overrides``
    """
    ...

@require_config
async def add_role(member: discord.Member, role: discord.Role) -> None:
    """
        Add a role to a member, as if added by another user.

    :param member: Member to add the role to
    :param role: Role to be added
    """
    ...

@require_config
async def remove_role(member: discord.Member, role: discord.Role) -> None:
    """
        Remove a role from a member, as if removed by another user.

    :param member: Member to remove the role from
    :param role: Role to remove
    """
    ...

@require_config
async def add_reaction(user: typing.Union[discord.user.BaseUser, discord.abc.User], message: discord.Message, emoji: str) -> None:
    """
        Add a reaction to a message, as if added by another user

    :param user: User who reacted
    :param message: Message they reacted to
    :param emoji: Emoji that was used
    """
    ...

@require_config
async def remove_reaction(user: typing.Union[discord.user.BaseUser, discord.abc.User], message: discord.Message, emoji: str) -> None:
    """
        Remove a reaction from a message, as if done by another user

    :param user: User who removed their react
    :param message: Message they removed react from
    :param emoji: Emoji that was removed
    """
    ...

@require_config
async def member_join(guild: typing.Union[discord.Guild, int] = ..., user: typing.Optional[discord.User] = ..., *, name: str = ..., discrim: typing.Union[str, int] = ...) -> discord.Member:
    """
        Have a new member join a guild, either an existing or new user for the framework

    :param guild: Guild member is joining
    :param user: User to join, or None to create a new user
    :param name: If creating a new user, the name of the user. None to auto-generate
    :param discrim: If creating a new user, the discrim of the user. None to auto-generate
    """
    ...

def get_config() -> RunnerConfig:
    """
        Get the current runner configuration

    :return: Current runner config
    """
    ...

def configure(client: discord.Client, guilds: typing.Union[int, typing.List[str]] = ..., text_channels: typing.Union[int, typing.List[str]] = ..., voice_channels: typing.Union[int, typing.List[str]] = ..., members: typing.Union[int, typing.List[str]] = ...) -> None:
    """
        Set up the runner configuration. This should be done before any tests are run.

    :param client: Client to configure with. Should be the bot/client that is going to be tested.
    :param guilds: Number or list of names of guilds to start the configuration with. Default is 1
    :param text_channels: Number or list of names of text channels in each guild to start with. Default is 1
    :param voice_channels: Number or list of names of voice channels in each guild to start with. Default is 1.
    :param members: Number or list of names of members in each guild (other than the client) to start with. Default is 1.
    """
    ...

