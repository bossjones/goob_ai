"""
This type stub file was generated by pyright.
"""

import typing
import discord
from . import _types

"""
    Module for (mostly) stateless creation/destructuring of discord.py objects. Primarily a utility
    for the rest of the library, which often needs to convert between objects and JSON at various stages.
"""
generated_ids: int = ...
def make_id() -> int:
    ...

@typing.overload
def make_user_dict(username: str, discrim: typing.Union[str, int], avatar: typing.Optional[str], id_num: int = ..., flags: int = ..., *, bot: bool = ..., mfa_enabled: bool = ..., locale: str = ..., verified: bool = ..., email: str = ..., premium_type: int = ...) -> _types.JsonDict:
    ...

def make_user_dict(username: str, discrim: typing.Union[str, int], avatar: str, id_num: int = ..., flags: int = ..., **kwargs: typing.Any) -> _types.JsonDict:
    ...

def dict_from_user(user: discord.User) -> _types.JsonDict:
    ...

@typing.overload
def make_member_dict(guild: discord.Guild, user: discord.User, roles: typing.List[int], joined: int = ..., deaf: bool = ..., mute: bool = ..., voice: bool = ..., flags: int = ..., *, nick: str = ...) -> _types.JsonDict:
    ...

def make_member_dict(guild: discord.Guild, user: discord.User, roles: typing.List[int], joined: int = ..., deaf: bool = ..., mute: bool = ..., voice: bool = ..., flags: int = ..., **kwargs: typing.Any) -> _types.JsonDict:
    ...

def dict_from_member(member: discord.Member) -> _types.JsonDict:
    ...

def make_role_dict(name: str, id_num: int = ..., colour: int = ..., color: typing.Optional[int] = ..., hoist: bool = ..., position: int = ..., permissions: int = ..., managed: bool = ..., mentionable: bool = ...) -> _types.JsonDict:
    ...

def dict_from_role(role: discord.Role) -> _types.JsonDict:
    ...

@typing.overload
def make_channel_dict(ctype: int, id_num: int = ..., *, guild_id: int = ..., position: int = ..., permission_overwrites: _types.JsonDict = ..., name: str = ..., topic: typing.Optional[str] = ..., nsfw: bool = ..., last_message_id: typing.Optional[str] = ..., bitrate: int = ..., user_limit: int = ..., rate_limit_per_user: int = ..., recipients: typing.List[_types.JsonDict] = ..., icon: typing.Optional[str] = ..., owner_id: int = ..., application_id: int = ..., parent_id: typing.Optional[int] = ..., last_pin_timestamp: int = ...) -> _types.JsonDict:
    ...

def make_channel_dict(ctype: int, id_num: int = ..., **kwargs: typing.Any) -> _types.JsonDict:
    ...

@typing.overload
def make_text_channel_dict(name: str, id_num: int = ..., guild_id: int = ..., position: int = ..., permission_overwrites: _types.JsonDict = ..., topic: typing.Optional[str] = ..., nsfw: bool = ..., last_message_id: typing.Optional[int] = ..., rate_limit_per_user: int = ..., parent_id: typing.Optional[int] = ..., last_pin_timestamp: int = ...) -> _types.JsonDict:
    ...

def make_text_channel_dict(name: str, id_num: int = ..., **kwargs: typing.Any) -> _types.JsonDict:
    ...

def make_category_channel_dict(name: str, id_num: int = ..., **kwargs: typing.Any) -> _types.JsonDict:
    ...

def make_dm_channel_dict(user: discord.User, id_num: int = ..., **kwargs: typing.Any) -> _types.JsonDict:
    ...

def make_voice_channel_dict(name: str, id_num: int = ..., **kwargs: typing.Any) -> _types.JsonDict:
    ...

def dict_from_overwrite(target: typing.Union[discord.Member, discord.Role], overwrite: discord.PermissionOverwrite) -> _types.JsonDict:
    ...

def dict_from_channel(channel: _types.AnyChannel) -> _types.JsonDict:
    ...

@typing.overload
def make_message_dict(channel: _types.AnyChannel, author: discord.user.BaseUser, id_num: int = ..., content: str = ..., timestamp: int = ..., edited_timestamp: typing.Optional[int] = ..., tts: bool = ..., mention_everyone: bool = ..., mentions: typing.List[typing.Union[discord.User, discord.Member]] = ..., mention_roles: typing.List[int] = ..., mention_channels: typing.List[_types.AnyChannel] = ..., attachments: typing.List[discord.Attachment] = ..., embeds: typing.List[discord.Embed] = ..., pinned: bool = ..., type: int = ..., *, guild_id: int = ..., member: discord.Member = ..., reactions: typing.List[discord.Reaction] = ..., nonce: typing.Optional[int] = ..., webhook_id: int = ..., activity: discord.Activity = ..., application: _types.JsonDict = ...) -> _types.JsonDict:
    ...

def make_message_dict(channel: _types.AnyChannel, author: discord.user.BaseUser, id_num: int = ..., content: str = ..., timestamp: int = ..., edited_timestamp: typing.Optional[int] = ..., tts: bool = ..., mention_everyone: bool = ..., mentions: typing.List[discord.User] = ..., mention_roles: typing.List[int] = ..., mention_channels: typing.List[_types.AnyChannel] = ..., attachments: typing.List[discord.Attachment] = ..., embeds: typing.List[discord.Embed] = ..., pinned: bool = ..., type: int = ..., **kwargs) -> _types.JsonDict:
    ...

def dict_from_message(message: discord.Message) -> _types.JsonDict:
    ...

def make_attachment_dict(filename: str, size: int, url: str, proxy_url: str, id_num: int = ..., height: typing.Optional[int] = ..., width: typing.Optional[int] = ..., content_type: typing.Optional[str] = ...) -> _types.JsonDict:
    ...

def dict_from_attachment(attachment: discord.Attachment) -> _types.JsonDict:
    ...

def make_emoji_dict(): # -> None:
    ...

def dict_from_emoji(emoji): # -> dict[Any, Any]:
    ...

@typing.overload
def make_guild_dict(name: str, owner_id: int, roles: typing.List[_types.JsonDict], id_num: int = ..., emojis: typing.List[_types.JsonDict] = ..., icon: typing.Optional[str] = ..., splash: typing.Optional[str] = ..., region: str = ..., afk_channel_id: int = ..., afk_timeout: int = ..., verification_level: int = ..., default_message_notifications: int = ..., explicit_content_filter: int = ..., features: typing.List[str] = ..., mfa_level: int = ..., application_id: int = ..., system_channel_id: int = ..., *, owner: bool = ..., permissions: int = ..., embed_enabled: bool = ..., embed_channel_id: int = ..., widget_enabled: bool = ..., widget_channel_id: int = ..., joined_at: int = ..., large: bool = ..., unavailable: bool = ..., member_count: int = ..., voice_states: typing.List[discord.VoiceState] = ..., members: typing.List[discord.Member] = ..., channels: typing.List[discord.abc.GuildChannel] = ..., presences: typing.List[discord.Activity] = ...) -> _types.JsonDict:
    ...

def make_guild_dict(name: str, owner_id: int, roles: typing.List[_types.JsonDict], id_num: int = ..., emojis: typing.Optional[typing.List[_types.JsonDict]] = ..., icon: typing.Optional[str] = ..., splash: typing.Optional[str] = ..., region: str = ..., afk_channel_id: typing.Optional[int] = ..., afk_timeout: int = ..., verification_level: int = ..., default_message_notifications: int = ..., explicit_content_filter: int = ..., features: typing.Optional[typing.List[str]] = ..., mfa_level: int = ..., application_id: typing.Optional[int] = ..., system_channel_id: typing.Optional[int] = ..., **kwargs: typing.Any) -> _types.JsonDict:
    ...

def dict_from_guild(guild: discord.Guild) -> _types.JsonDict:
    ...

