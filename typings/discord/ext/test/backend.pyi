"""
This type stub file was generated by pyright.
"""

import asyncio
import typing
import discord
import discord.http as dhttp
import pathlib
from . import _types, state as dstate

"""
    Module for 'server-side' state during testing. This module should contain
    methods for altering said server-side state, which then are responsible for triggering
    a ``parse_*`` call in the configured client state to inform the bot of the change.

    This setup matches discord's actual setup, where an HTTP call triggers a change on the server,
    which is then sent back to the bot as an event which is parsed and dispatched.
"""
class BackendState(typing.NamedTuple):
    """
        The dpytest backend, with all the state it needs to hold to be able to pretend to be
        discord. Generally only used internally, but exposed through :py:func:`get_state`
    """
    messages: typing.Dict[int, typing.List[_types.JsonDict]]
    state: dstate.FakeState
    ...


log = ...
_cur_config: typing.Optional[BackendState] = ...
_undefined = ...
class FakeRequest(typing.NamedTuple):
    """
        A fake web response, for use with discord ``HTTPException``\ s
    """
    status: int
    reason: str
    ...


class FakeHttp(dhttp.HTTPClient):
    """
        A mock implementation of an ``HTTPClient``. Instead of actually sending requests to discord, it triggers
        a runner callback and calls the ``dpytest`` backend to update any necessary state and trigger any necessary
        fake messages to the client.
    """
    fileno: typing.ClassVar[int] = ...
    state: dstate.FakeState
    def __init__(self, loop: asyncio.AbstractEventLoop = ...) -> None:
        ...
    
    async def request(self, *args: typing.Any, **kwargs: typing.Any) -> typing.NoReturn:
        """
            Overloaded to raise a NotImplemented error informing the user that the requested operation
            isn't yet supported by ``dpytest``. To fix this, the method call that triggered this error should be
            overloaded below to instead trigger a callback and call the appropriate backend function.

        :param args: Arguments provided to the request
        :param kwargs: Keyword arguments provided to the request
        """
        ...
    
    async def create_channel(self, guild_id: int, channel_type: discord.ChannelType, *, reason: typing.Optional[str] = ..., **options: typing.Any) -> _types.JsonDict:
        ...
    
    async def delete_channel(self, channel_id: int, *, reason: str = ...) -> None:
        ...
    
    async def get_channel(self, channel_id: int) -> _types.JsonDict:
        ...
    
    async def start_private_message(self, user_id: int) -> _types.JsonDict:
        ...
    
    async def send_message(self, channel_id: int, *, params: dhttp.MultipartParameters) -> _types.JsonDict:
        ...
    
    async def send_typing(self, channel_id: int) -> None:
        ...
    
    async def delete_message(self, channel_id: int, message_id: int, *, reason: typing.Optional[str] = ...) -> None:
        ...
    
    async def edit_message(self, channel_id: int, message_id: int, **fields: dhttp.MultipartParameters) -> _types.JsonDict:
        ...
    
    async def add_reaction(self, channel_id: int, message_id: int, emoji: str) -> None:
        ...
    
    async def remove_reaction(self, channel_id: int, message_id: int, emoji: str, member_id: int) -> None:
        ...
    
    async def remove_own_reaction(self, channel_id: int, message_id: int, emoji: str) -> None:
        ...
    
    async def clear_reactions(self, channel_id: int, message_id: int) -> None:
        ...
    
    async def get_message(self, channel_id: int, message_id: int) -> _types.JsonDict:
        ...
    
    async def logs_from(self, channel_id: int, limit: int, before: typing.Optional[int] = ..., after: typing.Optional[int] = ..., around: typing.Optional[int] = ...) -> typing.List[_types.JsonDict]:
        ...
    
    async def kick(self, user_id: int, guild_id: int, reason: typing.Optional[str] = ...) -> None:
        ...
    
    async def ban(self, user_id: int, guild_id: int, delete_message_days: int = ..., reason: typing.Optional[str] = ...) -> None:
        ...
    
    async def change_my_nickname(self, guild_id: int, nickname: str, *, reason: typing.Optional[str] = ...) -> _types.JsonDict:
        ...
    
    async def edit_member(self, guild_id: int, user_id: int, *, reason: typing.Optional[str] = ..., **fields: typing.Any) -> _types.JsonDict:
        ...
    
    async def get_member(self, guild_id: int, member_id: int) -> _types.JsonDict:
        ...
    
    async def edit_role(self, guild_id: int, role_id: int, *, reason: typing.Optional[str] = ..., **fields: typing.Any) -> _types.JsonDict:
        ...
    
    async def delete_role(self, guild_id: int, role_id: int, *, reason: typing.Optional[str] = ...) -> None:
        ...
    
    async def create_role(self, guild_id: int, *, reason: typing.Optional[str] = ..., **fields: typing.Any) -> _types.JsonDict:
        ...
    
    async def move_role_position(self, guild_id: int, positions: typing.List[_types.JsonDict], *, reason: typing.Optional[str] = ...) -> None:
        ...
    
    async def add_role(self, guild_id: int, user_id: int, role_id: int, *, reason: typing.Optional[str] = ...) -> None:
        ...
    
    async def remove_role(self, guild_id: int, user_id: int, role_id: int, *, reason: typing.Optional[str] = ...) -> None:
        ...
    
    async def application_info(self) -> _types.JsonDict:
        ...
    
    async def delete_channel_permissions(self, channel_id: int, target_id: int, *, reason: typing.Optional[str] = ...) -> None:
        ...
    
    async def edit_channel_permissions(self, channel_id: int, target_id: int, allow_value: int, deny_value: int, perm_type: str, *, reason: typing.Optional[str] = ...) -> None:
        ...
    
    async def get_from_cdn(self, url: str) -> bytes:
        ...
    
    async def get_user(self, user_id: int) -> _types.JsonDict:
        ...
    
    async def pin_message(self, channel_id: int, message_id: int, reason: typing.Optional[str] = ...) -> None:
        ...
    
    async def unpin_message(self, channel_id: int, message_id: int, reason: typing.Optional[str] = ...) -> None:
        ...
    
    async def get_guilds(self, limit: int, before: typing.Optional[int] = ..., after: typing.Optional[int] = ...): # -> list[dict[str, Any]]:
        ...
    
    async def get_guild(self, guild_id: int) -> _types.JsonDict:
        ...
    


def get_state() -> dstate.FakeState:
    """
        Get the current backend state, or raise an error if it hasn't been configured

    :return: Current backend state
    """
    ...

def make_guild(name: str, members: typing.List[discord.Member] = ..., channels: typing.List[_types.AnyChannel] = ..., roles: typing.List[discord.Role] = ..., owner: bool = ..., id_num: int = ...) -> discord.Guild:
    """
        Add a new guild to the backend, triggering any relevant callbacks on the configured client

    :param name: Name of the guild
    :param members: Existing members of the guild or None
    :param channels: Existing channels in the guild or None
    :param roles: Existing roles in the guild or None
    :param owner: Whether the configured client owns the guild, default is false
    :param id_num: ID of the guild, or nothing to auto-generate
    :return: Newly created guild
    """
    ...

def update_guild(guild: discord.Guild, roles: typing.List[discord.Role] = ...) -> discord.Guild:
    """
        Update an existing guild with new information, triggers a guild update but not any individual item
        create/edit calls

    :param guild: Guild to be updated
    :param roles: New role list for the guild
    :return: Updated guild object
    """
    ...

def make_role(name: str, guild: discord.Guild, id_num: int = ..., colour: int = ..., color: typing.Optional[int] = ..., permissions: int = ..., hoist: bool = ..., mentionable: bool = ...) -> discord.Role:
    """
        Add a new role to the backend, triggering any relevant callbacks on the configured client

    :param name: Name of the new role
    :param guild: Guild role is being added to
    :param id_num: ID of the new role, or nothing to auto-generate
    :param colour: Color of the new role
    :param color: Alias for above
    :param permissions: Permissions for the new role
    :param hoist: Whether the new role is hoisted
    :param mentionable: Whether the new role is mentionable
    :return: Newly created role
    """
    ...

def update_role(role: discord.Role, colour: typing.Optional[int] = ..., color: typing.Optional[int] = ..., permissions: typing.Optional[int] = ..., hoist: typing.Optional[bool] = ..., mentionable: typing.Optional[bool] = ..., name: typing.Optional[str] = ...) -> discord.Role:
    """
        Update an existing role with new data, triggering a role update event.
        Any value not passed/passed None will not update the existing value.

    :param role: Role to update
    :param colour: New color for the role
    :param color: Alias for above
    :param permissions: New permissions
    :param hoist: New hoist value
    :param mentionable: New mention value
    :param name: New name for the role
    :return: Role that was updated
    """
    ...

def delete_role(role: discord.Role) -> None:
    """
        Remove a role from the backend, deleting it from the guild

    :param role: Role to delete
    """
    ...

def make_text_channel(name: str, guild: discord.Guild, position: int = ..., id_num: int = ..., permission_overwrites: typing.Optional[_types.JsonDict] = ..., parent_id: typing.Optional[int] = ...) -> discord.TextChannel:
    ...

def make_category_channel(name: str, guild: discord.Guild, position: int = ..., id_num: int = ..., permission_overwrites: typing.Optional[_types.JsonDict] = ...) -> discord.CategoryChannel:
    ...

def make_voice_channel(name: str, guild: discord.Guild, position: int = ..., id_num: int = ..., permission_overwrites: typing.Optional[_types.JsonDict] = ..., parent_id: typing.Optional[int] = ..., bitrate: int = ..., user_limit: int = ...) -> discord.VoiceChannel:
    ...

def delete_channel(channel: _types.AnyChannel) -> None:
    ...

def update_text_channel(channel: discord.TextChannel, target: typing.Union[discord.User, discord.Role], override: typing.Optional[discord.PermissionOverwrite] = ...) -> None:
    ...

def make_user(username: str, discrim: typing.Union[str, int], avatar: typing.Optional[str] = ..., id_num: int = ...) -> discord.User:
    ...

def make_member(user: typing.Union[discord.user.BaseUser, discord.abc.User], guild: discord.Guild, nick: typing.Optional[str] = ..., roles: typing.Optional[typing.List[discord.Role]] = ...) -> discord.Member:
    ...

def update_member(member: discord.Member, nick: typing.Optional[str] = ..., roles: typing.Optional[typing.List[discord.Role]] = ...) -> discord.Member:
    ...

def delete_member(member: discord.Member) -> None:
    ...

def make_message(content: str, author: typing.Union[discord.user.BaseUser, discord.abc.User], channel: _types.AnyChannel, tts: bool = ..., embeds: typing.Optional[typing.List[discord.Embed]] = ..., attachments: typing.Optional[typing.List[discord.Attachment]] = ..., nonce: typing.Optional[int] = ..., id_num: int = ...) -> discord.Message:
    ...

def edit_message(message: discord.Message, **fields: dhttp.MultipartParameters) -> _types.JsonDict:
    ...

MEMBER_MENTION: typing.Pattern = ...
ROLE_MENTION: typing.Pattern = ...
CHANNEL_MENTION: typing.Pattern = ...
def find_user_mentions(content: typing.Optional[str], guild: typing.Optional[discord.Guild]) -> typing.List[discord.Member]:
    ...

def find_role_mentions(content: typing.Optional[str], guild: typing.Optional[discord.Guild]) -> typing.List[int]:
    ...

def find_channel_mentions(content: typing.Optional[str], guild: typing.Optional[discord.Guild]) -> typing.List[_types.AnyChannel]:
    ...

def delete_message(message: discord.Message) -> None:
    ...

def make_attachment(filename: pathlib.Path, name: typing.Optional[str] = ..., id_num: int = ...) -> discord.Attachment:
    ...

def add_reaction(message: discord.Message, user: typing.Union[discord.user.BaseUser, discord.abc.User], emoji: str) -> None:
    ...

def remove_reaction(message: discord.Message, user: discord.user.BaseUser, emoji: str) -> None:
    ...

def clear_reactions(message: discord.Message): # -> None:
    ...

def pin_message(channel_id: int, message_id: int): # -> None:
    ...

def unpin_message(channel_id: int, message_id: int): # -> None:
    ...

@typing.overload
def configure(client: discord.Client) -> None:
    ...

@typing.overload
def configure(client: typing.Optional[discord.Client], *, use_dummy: bool = ...) -> None:
    ...

def configure(client: typing.Optional[discord.Client], *, use_dummy: bool = ...) -> None:
    """
        Configure the backend, optionally with the provided client

    :param client: Client to use, or None
    :param use_dummy: Whether to use a dummy if client param is None, or error
    """
    ...

