"""
This type stub file was generated by pyright.
"""

from torch import Tensor, nn

def drop_block2d(input: Tensor, p: float, block_size: int, inplace: bool = ..., eps: float = ..., training: bool = ...) -> Tensor:
    """
    Implements DropBlock2d from `"DropBlock: A regularization method for convolutional networks"
    <https://arxiv.org/abs/1810.12890>`.

    Args:
        input (Tensor[N, C, H, W]): The input tensor or 4-dimensions with the first one
                    being its batch i.e. a batch with ``N`` rows.
        p (float): Probability of an element to be dropped.
        block_size (int): Size of the block to drop.
        inplace (bool): If set to ``True``, will do this operation in-place. Default: ``False``.
        eps (float): A value added to the denominator for numerical stability. Default: 1e-6.
        training (bool): apply dropblock if is ``True``. Default: ``True``.

    Returns:
        Tensor[N, C, H, W]: The randomly zeroed tensor after dropblock.
    """
    ...

def drop_block3d(input: Tensor, p: float, block_size: int, inplace: bool = ..., eps: float = ..., training: bool = ...) -> Tensor:
    """
    Implements DropBlock3d from `"DropBlock: A regularization method for convolutional networks"
    <https://arxiv.org/abs/1810.12890>`.

    Args:
        input (Tensor[N, C, D, H, W]): The input tensor or 5-dimensions with the first one
                    being its batch i.e. a batch with ``N`` rows.
        p (float): Probability of an element to be dropped.
        block_size (int): Size of the block to drop.
        inplace (bool): If set to ``True``, will do this operation in-place. Default: ``False``.
        eps (float): A value added to the denominator for numerical stability. Default: 1e-6.
        training (bool): apply dropblock if is ``True``. Default: ``True``.

    Returns:
        Tensor[N, C, D, H, W]: The randomly zeroed tensor after dropblock.
    """
    ...

class DropBlock2d(nn.Module):
    """
    See :func:`drop_block2d`.
    """
    def __init__(self, p: float, block_size: int, inplace: bool = ..., eps: float = ...) -> None:
        ...
    
    def forward(self, input: Tensor) -> Tensor:
        """
        Args:
            input (Tensor): Input feature map on which some areas will be randomly
                dropped.
        Returns:
            Tensor: The tensor after DropBlock layer.
        """
        ...
    
    def __repr__(self) -> str:
        ...
    


class DropBlock3d(DropBlock2d):
    """
    See :func:`drop_block3d`.
    """
    def __init__(self, p: float, block_size: int, inplace: bool = ..., eps: float = ...) -> None:
        ...
    
    def forward(self, input: Tensor) -> Tensor:
        """
        Args:
            input (Tensor): Input feature map on which some areas will be randomly
                dropped.
        Returns:
            Tensor: The tensor after DropBlock layer.
        """
        ...
    


