"""
This type stub file was generated by pyright.
"""

import functools
import torch
import torch._custom_ops

@functools.lru_cache(None)
def get_meta_lib(): # -> Library:
    ...

def register_meta(op_name, overload_name=...): # -> Callable[..., Any]:
    ...

@register_meta("roi_align")
def meta_roi_align(input, rois, spatial_scale, pooled_height, pooled_width, sampling_ratio, aligned):
    ...

@register_meta("_roi_align_backward")
def meta_roi_align_backward(grad, rois, spatial_scale, pooled_height, pooled_width, batch_size, channels, height, width, sampling_ratio, aligned):
    ...

@register_meta("ps_roi_align")
def meta_ps_roi_align(input, rois, spatial_scale, pooled_height, pooled_width, sampling_ratio): # -> tuple[Any, Tensor]:
    ...

@register_meta("_ps_roi_align_backward")
def meta_ps_roi_align_backward(grad, rois, channel_mapping, spatial_scale, pooled_height, pooled_width, sampling_ratio, batch_size, channels, height, width):
    ...

@register_meta("roi_pool")
def meta_roi_pool(input, rois, spatial_scale, pooled_height, pooled_width): # -> tuple[Any, Tensor]:
    ...

@register_meta("_roi_pool_backward")
def meta_roi_pool_backward(grad, rois, argmax, spatial_scale, pooled_height, pooled_width, batch_size, channels, height, width):
    ...

@register_meta("ps_roi_pool")
def meta_ps_roi_pool(input, rois, spatial_scale, pooled_height, pooled_width): # -> tuple[Any, Tensor]:
    ...

@register_meta("_ps_roi_pool_backward")
def meta_ps_roi_pool_backward(grad, rois, channel_mapping, spatial_scale, pooled_height, pooled_width, batch_size, channels, height, width):
    ...

@torch._custom_ops.impl_abstract("torchvision::nms")
def meta_nms(dets, scores, iou_threshold):
    ...

@register_meta("deform_conv2d")
def meta_deform_conv2d(input, weight, offset, mask, bias, stride_h, stride_w, pad_h, pad_w, dil_h, dil_w, n_weight_grps, n_offset_grps, use_mask):
    ...

@register_meta("_deform_conv2d_backward")
def meta_deform_conv2d_backward(grad, input, weight, offset, mask, bias, stride_h, stride_w, pad_h, pad_w, dilation_h, dilation_w, groups, offset_groups, use_mask): # -> tuple[Any, Any, Any, Any, Any]:
    ...

