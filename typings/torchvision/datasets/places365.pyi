"""
This type stub file was generated by pyright.
"""

from pathlib import Path
from typing import Any, Callable, Dict, List, Optional, Tuple, Union
from .vision import VisionDataset

class Places365(VisionDataset):
    r"""`Places365 <http://places2.csail.mit.edu/index.html>`_ classification dataset.

    Args:
        root (str or ``pathlib.Path``): Root directory of the Places365 dataset.
        split (string, optional): The dataset split. Can be one of ``train-standard`` (default), ``train-challenge``,
            ``val``.
        small (bool, optional): If ``True``, uses the small images, i.e. resized to 256 x 256 pixels, instead of the
            high resolution ones.
        download (bool, optional): If ``True``, downloads the dataset components and places them in ``root``. Already
            downloaded archives are not downloaded again.
        transform (callable, optional): A function/transform that takes in a PIL image
            and returns a transformed version. E.g, ``transforms.RandomCrop``
        target_transform (callable, optional): A function/transform that takes in the
            target and transforms it.
        loader (callable, optional): A function to load an image given its path.

     Attributes:
        classes (list): List of the class names.
        class_to_idx (dict): Dict with items (class_name, class_index).
        imgs (list): List of (image path, class_index) tuples
        targets (list): The class_index value for each image in the dataset

    Raises:
        RuntimeError: If ``download is False`` and the meta files, i.e. the devkit, are not present or corrupted.
        RuntimeError: If ``download is True`` and the image archive is already extracted.
    """
    _SPLITS = ...
    _BASE_URL = ...
    _DEVKIT_META = ...
    _CATEGORIES_META = ...
    _FILE_LIST_META = ...
    _IMAGES_META = ...
    def __init__(self, root: Union[str, Path], split: str = ..., small: bool = ..., download: bool = ..., transform: Optional[Callable] = ..., target_transform: Optional[Callable] = ..., loader: Callable[[str], Any] = ...) -> None:
        ...
    
    def __getitem__(self, index: int) -> Tuple[Any, Any]:
        ...
    
    def __len__(self) -> int:
        ...
    
    @property
    def variant(self) -> str:
        ...
    
    @property
    def images_dir(self) -> str:
        ...
    
    def load_categories(self, download: bool = ...) -> Tuple[List[str], Dict[str, int]]:
        ...
    
    def load_file_list(self, download: bool = ...) -> Tuple[List[Tuple[str, int]], List[int]]:
        ...
    
    def download_devkit(self) -> None:
        ...
    
    def download_images(self) -> None:
        ...
    
    def extra_repr(self) -> str:
        ...
    


