"""
This type stub file was generated by pyright.
"""

import pathlib
from typing import Any, Callable, Dict, IO, Iterable, List, Optional, Tuple, TypeVar, Union

USER_AGENT = ...
def calculate_md5(fpath: Union[str, pathlib.Path], chunk_size: int = ...) -> str:
    ...

def check_md5(fpath: Union[str, pathlib.Path], md5: str, **kwargs: Any) -> bool:
    ...

def check_integrity(fpath: Union[str, pathlib.Path], md5: Optional[str] = ...) -> bool:
    ...

def download_url(url: str, root: Union[str, pathlib.Path], filename: Optional[Union[str, pathlib.Path]] = ..., md5: Optional[str] = ..., max_redirect_hops: int = ...) -> None:
    """Download a file from a url and place it in root.

    Args:
        url (str): URL to download file from
        root (str): Directory to place downloaded file in
        filename (str, optional): Name to save the file under. If None, use the basename of the URL
        md5 (str, optional): MD5 checksum of the download. If None, do not check
        max_redirect_hops (int, optional): Maximum number of redirect hops allowed
    """
    ...

def list_dir(root: Union[str, pathlib.Path], prefix: bool = ...) -> List[str]:
    """List all directories at a given root

    Args:
        root (str): Path to directory whose folders need to be listed
        prefix (bool, optional): If true, prepends the path to each result, otherwise
            only returns the name of the directories found
    """
    ...

def list_files(root: Union[str, pathlib.Path], suffix: str, prefix: bool = ...) -> List[str]:
    """List all files ending with a suffix at a given root

    Args:
        root (str): Path to directory whose folders need to be listed
        suffix (str or tuple): Suffix of the files to match, e.g. '.png' or ('.jpg', '.png').
            It uses the Python "str.endswith" method and is passed directly
        prefix (bool, optional): If true, prepends the path to each result, otherwise
            only returns the name of the files found
    """
    ...

def download_file_from_google_drive(file_id: str, root: Union[str, pathlib.Path], filename: Optional[Union[str, pathlib.Path]] = ..., md5: Optional[str] = ...): # -> None:
    """Download a Google Drive file from  and place it in root.

    Args:
        file_id (str): id of file to be downloaded
        root (str): Directory to place downloaded file in
        filename (str, optional): Name to save the file under. If None, use the id of the file.
        md5 (str, optional): MD5 checksum of the download. If None, do not check
    """
    ...

_ZIP_COMPRESSION_MAP: Dict[str, int] = ...
_ARCHIVE_EXTRACTORS: Dict[str, Callable[[Union[str, pathlib.Path], Union[str, pathlib.Path], Optional[str]], None]] = ...
_COMPRESSED_FILE_OPENERS: Dict[str, Callable[..., IO]] = ...
_FILE_TYPE_ALIASES: Dict[str, Tuple[Optional[str], Optional[str]]] = ...
def extract_archive(from_path: Union[str, pathlib.Path], to_path: Optional[Union[str, pathlib.Path]] = ..., remove_finished: bool = ...) -> Union[str, pathlib.Path]:
    """Extract an archive.

    The archive type and a possible compression is automatically detected from the file name. If the file is compressed
    but not an archive the call is dispatched to :func:`decompress`.

    Args:
        from_path (str): Path to the file to be extracted.
        to_path (str): Path to the directory the file will be extracted to. If omitted, the directory of the file is
            used.
        remove_finished (bool): If ``True``, remove the file after the extraction.

    Returns:
        (str): Path to the directory the file was extracted to.
    """
    ...

def download_and_extract_archive(url: str, download_root: Union[str, pathlib.Path], extract_root: Optional[Union[str, pathlib.Path]] = ..., filename: Optional[Union[str, pathlib.Path]] = ..., md5: Optional[str] = ..., remove_finished: bool = ...) -> None:
    ...

def iterable_to_str(iterable: Iterable) -> str:
    ...

T = TypeVar("T", str, bytes)
def verify_str_arg(value: T, arg: Optional[str] = ..., valid_values: Optional[Iterable[T]] = ..., custom_msg: Optional[str] = ...) -> T:
    ...

