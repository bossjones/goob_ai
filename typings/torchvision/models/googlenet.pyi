"""
This type stub file was generated by pyright.
"""

import torch
import torch.nn as nn
from typing import Any, Callable, List, Optional
from torch import Tensor
from ._api import WeightsEnum, register_model
from ._utils import handle_legacy_interface

__all__ = ["GoogLeNet", "GoogLeNetOutputs", "_GoogLeNetOutputs", "GoogLeNet_Weights", "googlenet"]
GoogLeNetOutputs = ...
_GoogLeNetOutputs = GoogLeNetOutputs
class GoogLeNet(nn.Module):
    __constants__ = ...
    def __init__(self, num_classes: int = ..., aux_logits: bool = ..., transform_input: bool = ..., init_weights: Optional[bool] = ..., blocks: Optional[List[Callable[..., nn.Module]]] = ..., dropout: float = ..., dropout_aux: float = ...) -> None:
        ...
    
    @torch.jit.unused
    def eager_outputs(self, x: Tensor, aux2: Tensor, aux1: Optional[Tensor]) -> GoogLeNetOutputs:
        ...
    
    def forward(self, x: Tensor) -> GoogLeNetOutputs:
        ...
    


class Inception(nn.Module):
    def __init__(self, in_channels: int, ch1x1: int, ch3x3red: int, ch3x3: int, ch5x5red: int, ch5x5: int, pool_proj: int, conv_block: Optional[Callable[..., nn.Module]] = ...) -> None:
        ...
    
    def forward(self, x: Tensor) -> Tensor:
        ...
    


class InceptionAux(nn.Module):
    def __init__(self, in_channels: int, num_classes: int, conv_block: Optional[Callable[..., nn.Module]] = ..., dropout: float = ...) -> None:
        ...
    
    def forward(self, x: Tensor) -> Tensor:
        ...
    


class BasicConv2d(nn.Module):
    def __init__(self, in_channels: int, out_channels: int, **kwargs: Any) -> None:
        ...
    
    def forward(self, x: Tensor) -> Tensor:
        ...
    


class GoogLeNet_Weights(WeightsEnum):
    IMAGENET1K_V1 = ...
    DEFAULT = ...


@register_model()
@handle_legacy_interface(weights=("pretrained", GoogLeNet_Weights.IMAGENET1K_V1))
def googlenet(*, weights: Optional[GoogLeNet_Weights] = ..., progress: bool = ..., **kwargs: Any) -> GoogLeNet:
    """GoogLeNet (Inception v1) model architecture from
    `Going Deeper with Convolutions <http://arxiv.org/abs/1409.4842>`_.

    Args:
        weights (:class:`~torchvision.models.GoogLeNet_Weights`, optional): The
            pretrained weights for the model. See
            :class:`~torchvision.models.GoogLeNet_Weights` below for
            more details, and possible values. By default, no pre-trained
            weights are used.
        progress (bool, optional): If True, displays a progress bar of the
            download to stderr. Default is True.
        **kwargs: parameters passed to the ``torchvision.models.GoogLeNet``
            base class. Please refer to the `source code
            <https://github.com/pytorch/vision/blob/main/torchvision/models/googlenet.py>`_
            for more details about this class.
    .. autoclass:: torchvision.models.GoogLeNet_Weights
        :members:
    """
    ...

