"""
This type stub file was generated by pyright.
"""

import torch
from typing import Any, Callable, Optional
from torch import nn
from .._api import WeightsEnum, register_model
from .._utils import handle_legacy_interface

__all__ = ["S3D", "S3D_Weights", "s3d"]
class TemporalSeparableConv(nn.Sequential):
    def __init__(self, in_planes: int, out_planes: int, kernel_size: int, stride: int, padding: int, norm_layer: Callable[..., nn.Module]) -> None:
        ...
    


class SepInceptionBlock3D(nn.Module):
    def __init__(self, in_planes: int, b0_out: int, b1_mid: int, b1_out: int, b2_mid: int, b2_out: int, b3_out: int, norm_layer: Callable[..., nn.Module]) -> None:
        ...
    
    def forward(self, x): # -> Tensor:
        ...
    


class S3D(nn.Module):
    """S3D main class.

    Args:
        num_class (int): number of classes for the classification task.
        dropout (float): dropout probability.
        norm_layer (Optional[Callable]): Module specifying the normalization layer to use.

    Inputs:
        x (Tensor): batch of videos with dimensions (batch, channel, time, height, width)
    """
    def __init__(self, num_classes: int = ..., dropout: float = ..., norm_layer: Optional[Callable[..., torch.nn.Module]] = ...) -> None:
        ...
    
    def forward(self, x): # -> Tensor:
        ...
    


class S3D_Weights(WeightsEnum):
    KINETICS400_V1 = ...
    DEFAULT = ...


@register_model()
@handle_legacy_interface(weights=("pretrained", S3D_Weights.KINETICS400_V1))
def s3d(*, weights: Optional[S3D_Weights] = ..., progress: bool = ..., **kwargs: Any) -> S3D:
    """Construct Separable 3D CNN model.

    Reference: `Rethinking Spatiotemporal Feature Learning <https://arxiv.org/abs/1712.04851>`__.

    .. betastatus:: video module

    Args:
        weights (:class:`~torchvision.models.video.S3D_Weights`, optional): The
            pretrained weights to use. See
            :class:`~torchvision.models.video.S3D_Weights`
            below for more details, and possible values. By default, no
            pre-trained weights are used.
        progress (bool): If True, displays a progress bar of the download to stderr. Default is True.
        **kwargs: parameters passed to the ``torchvision.models.video.S3D`` base class.
            Please refer to the `source code
            <https://github.com/pytorch/vision/blob/main/torchvision/models/video/s3d.py>`_
            for more details about this class.

    .. autoclass:: torchvision.models.video.S3D_Weights
        :members:
    """
    ...

