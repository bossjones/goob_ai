"""
This type stub file was generated by pyright.
"""

from typing import Any, Dict, List, Optional, Tuple
from torch import Tensor, nn
from .image_list import ImageList

class GeneralizedRCNNTransform(nn.Module):
    """
    Performs input / target transformation before feeding the data to a GeneralizedRCNN
    model.

    The transformations it performs are:
        - input normalization (mean subtraction and std division)
        - input / target resizing to match min_size / max_size

    It returns a ImageList for the inputs, and a List[Dict[Tensor]] for the targets
    """
    def __init__(self, min_size: int, max_size: int, image_mean: List[float], image_std: List[float], size_divisible: int = ..., fixed_size: Optional[Tuple[int, int]] = ..., **kwargs: Any) -> None:
        ...
    
    def forward(self, images: List[Tensor], targets: Optional[List[Dict[str, Tensor]]] = ...) -> Tuple[ImageList, Optional[List[Dict[str, Tensor]]]]:
        ...
    
    def normalize(self, image: Tensor) -> Tensor:
        ...
    
    def torch_choice(self, k: List[int]) -> int:
        """
        Implements `random.choice` via torch ops, so it can be compiled with
        TorchScript and we use PyTorch's RNG (not native RNG)
        """
        ...
    
    def resize(self, image: Tensor, target: Optional[Dict[str, Tensor]] = ...) -> Tuple[Tensor, Optional[Dict[str, Tensor]]]:
        ...
    
    def max_by_axis(self, the_list: List[List[int]]) -> List[int]:
        ...
    
    def batch_images(self, images: List[Tensor], size_divisible: int = ...) -> Tensor:
        ...
    
    def postprocess(self, result: List[Dict[str, Tensor]], image_shapes: List[Tuple[int, int]], original_image_sizes: List[Tuple[int, int]]) -> List[Dict[str, Tensor]]:
        ...
    
    def __repr__(self) -> str:
        ...
    


def resize_keypoints(keypoints: Tensor, original_size: List[int], new_size: List[int]) -> Tensor:
    ...

def resize_boxes(boxes: Tensor, original_size: List[int], new_size: List[int]) -> Tensor:
    ...

