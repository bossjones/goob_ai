"""
This type stub file was generated by pyright.
"""

import torch
from typing import Any, Callable, List, Optional
from torch import Tensor, nn
from ._api import WeightsEnum, register_model
from ._utils import handle_legacy_interface

__all__ = ["Inception3", "InceptionOutputs", "_InceptionOutputs", "Inception_V3_Weights", "inception_v3"]
InceptionOutputs = ...
_InceptionOutputs = InceptionOutputs
class Inception3(nn.Module):
    def __init__(self, num_classes: int = ..., aux_logits: bool = ..., transform_input: bool = ..., inception_blocks: Optional[List[Callable[..., nn.Module]]] = ..., init_weights: Optional[bool] = ..., dropout: float = ...) -> None:
        ...
    
    @torch.jit.unused
    def eager_outputs(self, x: Tensor, aux: Optional[Tensor]) -> InceptionOutputs:
        ...
    
    def forward(self, x: Tensor) -> InceptionOutputs:
        ...
    


class InceptionA(nn.Module):
    def __init__(self, in_channels: int, pool_features: int, conv_block: Optional[Callable[..., nn.Module]] = ...) -> None:
        ...
    
    def forward(self, x: Tensor) -> Tensor:
        ...
    


class InceptionB(nn.Module):
    def __init__(self, in_channels: int, conv_block: Optional[Callable[..., nn.Module]] = ...) -> None:
        ...
    
    def forward(self, x: Tensor) -> Tensor:
        ...
    


class InceptionC(nn.Module):
    def __init__(self, in_channels: int, channels_7x7: int, conv_block: Optional[Callable[..., nn.Module]] = ...) -> None:
        ...
    
    def forward(self, x: Tensor) -> Tensor:
        ...
    


class InceptionD(nn.Module):
    def __init__(self, in_channels: int, conv_block: Optional[Callable[..., nn.Module]] = ...) -> None:
        ...
    
    def forward(self, x: Tensor) -> Tensor:
        ...
    


class InceptionE(nn.Module):
    def __init__(self, in_channels: int, conv_block: Optional[Callable[..., nn.Module]] = ...) -> None:
        ...
    
    def forward(self, x: Tensor) -> Tensor:
        ...
    


class InceptionAux(nn.Module):
    def __init__(self, in_channels: int, num_classes: int, conv_block: Optional[Callable[..., nn.Module]] = ...) -> None:
        ...
    
    def forward(self, x: Tensor) -> Tensor:
        ...
    


class BasicConv2d(nn.Module):
    def __init__(self, in_channels: int, out_channels: int, **kwargs: Any) -> None:
        ...
    
    def forward(self, x: Tensor) -> Tensor:
        ...
    


class Inception_V3_Weights(WeightsEnum):
    IMAGENET1K_V1 = ...
    DEFAULT = ...


@register_model()
@handle_legacy_interface(weights=("pretrained", Inception_V3_Weights.IMAGENET1K_V1))
def inception_v3(*, weights: Optional[Inception_V3_Weights] = ..., progress: bool = ..., **kwargs: Any) -> Inception3:
    """
    Inception v3 model architecture from
    `Rethinking the Inception Architecture for Computer Vision <http://arxiv.org/abs/1512.00567>`_.

    .. note::
        **Important**: In contrast to the other models the inception_v3 expects tensors with a size of
        N x 3 x 299 x 299, so ensure your images are sized accordingly.

    Args:
        weights (:class:`~torchvision.models.Inception_V3_Weights`, optional): The
            pretrained weights for the model. See
            :class:`~torchvision.models.Inception_V3_Weights` below for
            more details, and possible values. By default, no pre-trained
            weights are used.
        progress (bool, optional): If True, displays a progress bar of the
            download to stderr. Default is True.
        **kwargs: parameters passed to the ``torchvision.models.Inception3``
            base class. Please refer to the `source code
            <https://github.com/pytorch/vision/blob/main/torchvision/models/inception.py>`_
            for more details about this class.

    .. autoclass:: torchvision.models.Inception_V3_Weights
        :members:
    """
    ...

