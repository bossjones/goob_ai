"""
This type stub file was generated by pyright.
"""

from typing import Any, Callable, List, Optional
from torch import Tensor, nn
from ._api import WeightsEnum, register_model
from ._utils import handle_legacy_interface

__all__ = ["MobileNetV2", "MobileNet_V2_Weights", "mobilenet_v2"]
class InvertedResidual(nn.Module):
    def __init__(self, inp: int, oup: int, stride: int, expand_ratio: int, norm_layer: Optional[Callable[..., nn.Module]] = ...) -> None:
        ...
    
    def forward(self, x: Tensor) -> Tensor:
        ...
    


class MobileNetV2(nn.Module):
    def __init__(self, num_classes: int = ..., width_mult: float = ..., inverted_residual_setting: Optional[List[List[int]]] = ..., round_nearest: int = ..., block: Optional[Callable[..., nn.Module]] = ..., norm_layer: Optional[Callable[..., nn.Module]] = ..., dropout: float = ...) -> None:
        """
        MobileNet V2 main class

        Args:
            num_classes (int): Number of classes
            width_mult (float): Width multiplier - adjusts number of channels in each layer by this amount
            inverted_residual_setting: Network structure
            round_nearest (int): Round the number of channels in each layer to be a multiple of this number
            Set to 1 to turn off rounding
            block: Module specifying inverted residual building block for mobilenet
            norm_layer: Module specifying the normalization layer to use
            dropout (float): The droupout probability

        """
        ...
    
    def forward(self, x: Tensor) -> Tensor:
        ...
    


_COMMON_META = ...
class MobileNet_V2_Weights(WeightsEnum):
    IMAGENET1K_V1 = ...
    IMAGENET1K_V2 = ...
    DEFAULT = ...


@register_model()
@handle_legacy_interface(weights=("pretrained", MobileNet_V2_Weights.IMAGENET1K_V1))
def mobilenet_v2(*, weights: Optional[MobileNet_V2_Weights] = ..., progress: bool = ..., **kwargs: Any) -> MobileNetV2:
    """MobileNetV2 architecture from the `MobileNetV2: Inverted Residuals and Linear
    Bottlenecks <https://arxiv.org/abs/1801.04381>`_ paper.

    Args:
        weights (:class:`~torchvision.models.MobileNet_V2_Weights`, optional): The
            pretrained weights to use. See
            :class:`~torchvision.models.MobileNet_V2_Weights` below for
            more details, and possible values. By default, no pre-trained
            weights are used.
        progress (bool, optional): If True, displays a progress bar of the
            download to stderr. Default is True.
        **kwargs: parameters passed to the ``torchvision.models.mobilenetv2.MobileNetV2``
            base class. Please refer to the `source code
            <https://github.com/pytorch/vision/blob/main/torchvision/models/mobilenetv2.py>`_
            for more details about this class.

    .. autoclass:: torchvision.models.MobileNet_V2_Weights
        :members:
    """
    ...

