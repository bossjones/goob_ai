"""
This type stub file was generated by pyright.
"""

from typing import Optional, Tuple
from torch import Tensor, nn
from . import InterpolationMode

"""
This file is part of the private API. Please do not use directly these classes as they will be modified on
future versions without warning. The classes should be accessed only via the transforms argument of Weights.
"""
__all__ = ["ObjectDetection", "ImageClassification", "VideoClassification", "SemanticSegmentation", "OpticalFlow"]
class ObjectDetection(nn.Module):
    def forward(self, img: Tensor) -> Tensor:
        ...
    
    def __repr__(self) -> str:
        ...
    
    def describe(self) -> str:
        ...
    


class ImageClassification(nn.Module):
    def __init__(self, *, crop_size: int, resize_size: int = ..., mean: Tuple[float, ...] = ..., std: Tuple[float, ...] = ..., interpolation: InterpolationMode = ..., antialias: Optional[bool] = ...) -> None:
        ...
    
    def forward(self, img: Tensor) -> Tensor:
        ...
    
    def __repr__(self) -> str:
        ...
    
    def describe(self) -> str:
        ...
    


class VideoClassification(nn.Module):
    def __init__(self, *, crop_size: Tuple[int, int], resize_size: Tuple[int, int], mean: Tuple[float, ...] = ..., std: Tuple[float, ...] = ..., interpolation: InterpolationMode = ...) -> None:
        ...
    
    def forward(self, vid: Tensor) -> Tensor:
        ...
    
    def __repr__(self) -> str:
        ...
    
    def describe(self) -> str:
        ...
    


class SemanticSegmentation(nn.Module):
    def __init__(self, *, resize_size: Optional[int], mean: Tuple[float, ...] = ..., std: Tuple[float, ...] = ..., interpolation: InterpolationMode = ..., antialias: Optional[bool] = ...) -> None:
        ...
    
    def forward(self, img: Tensor) -> Tensor:
        ...
    
    def __repr__(self) -> str:
        ...
    
    def describe(self) -> str:
        ...
    


class OpticalFlow(nn.Module):
    def forward(self, img1: Tensor, img2: Tensor) -> Tuple[Tensor, Tensor]:
        ...
    
    def __repr__(self) -> str:
        ...
    
    def describe(self) -> str:
        ...
    


