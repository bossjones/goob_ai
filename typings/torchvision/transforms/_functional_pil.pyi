"""
This type stub file was generated by pyright.
"""

import torch
from typing import Any, List, Literal, Optional, Sequence, Tuple, Union
from PIL import Image

@torch.jit.unused
def get_dimensions(img: Any) -> List[int]:
    ...

@torch.jit.unused
def get_image_size(img: Any) -> List[int]:
    ...

@torch.jit.unused
def get_image_num_channels(img: Any) -> int:
    ...

@torch.jit.unused
def hflip(img: Image.Image) -> Image.Image:
    ...

@torch.jit.unused
def vflip(img: Image.Image) -> Image.Image:
    ...

@torch.jit.unused
def adjust_brightness(img: Image.Image, brightness_factor: float) -> Image.Image:
    ...

@torch.jit.unused
def adjust_contrast(img: Image.Image, contrast_factor: float) -> Image.Image:
    ...

@torch.jit.unused
def adjust_saturation(img: Image.Image, saturation_factor: float) -> Image.Image:
    ...

@torch.jit.unused
def adjust_hue(img: Image.Image, hue_factor: float) -> Image.Image:
    ...

@torch.jit.unused
def adjust_gamma(img: Image.Image, gamma: float, gain: float = ...) -> Image.Image:
    ...

@torch.jit.unused
def pad(img: Image.Image, padding: Union[int, List[int], Tuple[int, ...]], fill: Optional[Union[float, List[float], Tuple[float, ...]]] = ..., padding_mode: Literal["constant", "edge", "reflect", "symmetric"] = ...) -> Image.Image:
    ...

@torch.jit.unused
def crop(img: Image.Image, top: int, left: int, height: int, width: int) -> Image.Image:
    ...

@torch.jit.unused
def resize(img: Image.Image, size: Union[List[int], int], interpolation: int = ...) -> Image.Image:
    ...

@torch.jit.unused
def affine(img: Image.Image, matrix: List[float], interpolation: int = ..., fill: Optional[Union[int, float, Sequence[int], Sequence[float]]] = ...) -> Image.Image:
    ...

@torch.jit.unused
def rotate(img: Image.Image, angle: float, interpolation: int = ..., expand: bool = ..., center: Optional[Tuple[int, int]] = ..., fill: Optional[Union[int, float, Sequence[int], Sequence[float]]] = ...) -> Image.Image:
    ...

@torch.jit.unused
def perspective(img: Image.Image, perspective_coeffs: List[float], interpolation: int = ..., fill: Optional[Union[int, float, Sequence[int], Sequence[float]]] = ...) -> Image.Image:
    ...

@torch.jit.unused
def to_grayscale(img: Image.Image, num_output_channels: int) -> Image.Image:
    ...

@torch.jit.unused
def invert(img: Image.Image) -> Image.Image:
    ...

@torch.jit.unused
def posterize(img: Image.Image, bits: int) -> Image.Image:
    ...

@torch.jit.unused
def solarize(img: Image.Image, threshold: int) -> Image.Image:
    ...

@torch.jit.unused
def adjust_sharpness(img: Image.Image, sharpness_factor: float) -> Image.Image:
    ...

@torch.jit.unused
def autocontrast(img: Image.Image) -> Image.Image:
    ...

@torch.jit.unused
def equalize(img: Image.Image) -> Image.Image:
    ...

