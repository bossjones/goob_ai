"""
This type stub file was generated by pyright.
"""

import torch
from typing import List, Optional, Union
from torch import Tensor

def get_dimensions(img: Tensor) -> List[int]:
    ...

def get_image_size(img: Tensor) -> List[int]:
    ...

def get_image_num_channels(img: Tensor) -> int:
    ...

def convert_image_dtype(image: torch.Tensor, dtype: torch.dtype = ...) -> torch.Tensor:
    ...

def vflip(img: Tensor) -> Tensor:
    ...

def hflip(img: Tensor) -> Tensor:
    ...

def crop(img: Tensor, top: int, left: int, height: int, width: int) -> Tensor:
    ...

def rgb_to_grayscale(img: Tensor, num_output_channels: int = ...) -> Tensor:
    ...

def adjust_brightness(img: Tensor, brightness_factor: float) -> Tensor:
    ...

def adjust_contrast(img: Tensor, contrast_factor: float) -> Tensor:
    ...

def adjust_hue(img: Tensor, hue_factor: float) -> Tensor:
    ...

def adjust_saturation(img: Tensor, saturation_factor: float) -> Tensor:
    ...

def adjust_gamma(img: Tensor, gamma: float, gain: float = ...) -> Tensor:
    ...

def pad(img: Tensor, padding: Union[int, List[int]], fill: Optional[Union[int, float]] = ..., padding_mode: str = ...) -> Tensor:
    ...

def resize(img: Tensor, size: List[int], interpolation: str = ..., antialias: Optional[bool] = ...) -> Tensor:
    ...

def affine(img: Tensor, matrix: List[float], interpolation: str = ..., fill: Optional[Union[int, float, List[float]]] = ...) -> Tensor:
    ...

def rotate(img: Tensor, matrix: List[float], interpolation: str = ..., expand: bool = ..., fill: Optional[Union[int, float, List[float]]] = ...) -> Tensor:
    ...

def perspective(img: Tensor, perspective_coeffs: List[float], interpolation: str = ..., fill: Optional[Union[int, float, List[float]]] = ...) -> Tensor:
    ...

def gaussian_blur(img: Tensor, kernel_size: List[int], sigma: List[float]) -> Tensor:
    ...

def invert(img: Tensor) -> Tensor:
    ...

def posterize(img: Tensor, bits: int) -> Tensor:
    ...

def solarize(img: Tensor, threshold: float) -> Tensor:
    ...

def adjust_sharpness(img: Tensor, sharpness_factor: float) -> Tensor:
    ...

def autocontrast(img: Tensor) -> Tensor:
    ...

def equalize(img: Tensor) -> Tensor:
    ...

def normalize(tensor: Tensor, mean: List[float], std: List[float], inplace: bool = ...) -> Tensor:
    ...

def erase(img: Tensor, i: int, j: int, h: int, w: int, v: Tensor, inplace: bool = ...) -> Tensor:
    ...

def elastic_transform(img: Tensor, displacement: Tensor, interpolation: str = ..., fill: Optional[Union[int, float, List[float]]] = ...) -> Tensor:
    ...

